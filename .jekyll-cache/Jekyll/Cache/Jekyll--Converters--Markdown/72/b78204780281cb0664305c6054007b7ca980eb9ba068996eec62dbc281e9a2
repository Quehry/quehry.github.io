I"-<h1 id="软件方法">软件方法</h1>
<h2 id="课程要求">课程要求</h2>
<p>学习面向对象这种软件开发方法（目前概念越来越广），通过java来了解面向对象具体怎么实现。</p>

<h3 id="随记">随记</h3>
<ol>
  <li>类，对象：
    <ul>
      <li>给类赋值变成实例/对象</li>
      <li>c语言可以构建面向对象所有的结构</li>
      <li>对象就是给类声明的一个变量</li>
      <li>类集合了属性和方法</li>
    </ul>
  </li>
  <li>面向对象的三大特征：
    <ul>
      <li>封装（encapsulation）:
        <ul>
          <li>private, protected, public</li>
          <li>可作用于属性和方法</li>
          <li>一般是隐藏对象的属性和实现细节，但是提供方法的接口</li>
          <li>提供公开的方法</li>
          <li>提高了软件开发的效率</li>
        </ul>

        <p><img src="../assets/img/posts/20211130/1.jpg" /></p>
      </li>
      <li>继承（inheritance）：
        <ul>
          <li>子类与父类</li>
          <li>子类自动具有父类属性和方法，添加自己特有的属性和方法，并且子类使用父类的方法也可以覆盖/重写父类方法</li>
          <li>可以实现代码的复用（当然功能不止于此）</li>
        </ul>
      </li>
      <li>多态（polymorphism）：
        <ul>
          <li>父类有多个子类</li>
          <li>子类覆盖/重写父类方法</li>
          <li>相当于是根据实际创建的对象类型动态决定使用哪个方法</li>
          <li>所有的子类都可以看成父类的类型，运行时，系统会自动调用各种子类的方法</li>
          <li>UML可以画出类之间的关系</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>java程序设计
    <ul>
      <li>百分百面向对象
        <ul>
          <li>不存在类以外代码</li>
          <li>只能采用面向对象方法编程</li>
          <li>java文件命名规范
            <ul>
              <li>必须以.java结尾</li>
              <li>源文件中如果只有一个类，文件类必须与该类名相同</li>
              <li>如果有多个类，且没有public类，文件名可与任一类名相同</li>
              <li>有多个类，且有public类，文件名必须与该类名相同</li>
              <li>一个JAVA源文件只能有一个public类，一个文件中只能有一个main主函数</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>静态方法/static，可以直接用类和函数名直接调用，和普通方法的区别是不用new一个示例</li>
      <li>多态的实现，先定义抽象的（abstract）父类，然后子类继承父类然后定义父类的抽象方法
        <ul>
          <li>通过抽象方法固定通用接口</li>
          <li>子类通过强制实现抽象方法实现多态</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="ppt整理">PPT整理</h2>

<h3 id="1-对象类">1. 对象，类</h3>
<ul>
  <li>使用对象之前要先声明和创造</li>
  <li>类定义了对象的类型，所有对象都是类的实例，所有的类描述了属性和定义了方法</li>
</ul>

<h3 id="2面向对象">2.面向对象</h3>
<ul>
  <li>封装：保护类的属性和方法,private,default,protected,public</li>
  <li>继承：B继承A，重用，修改，添加，A所有的属性都存在于B中，A的方法可以在B中重新定义，B的改动不会影响A</li>
  <li>多态：一个对象属于多个类，通过使用不同类中的方法属于不同的类，父类是抽象类，各个子类继承父类并定义方法，调用的时候根据不同子类调用方法。判断类型是否相同instanceof，声明的时候可以这么声明: A a = new B(),其中B是A的子类。</li>
</ul>

<h3 id="3java">3.JAVA</h3>
<ul>
  <li>x = bool ? a : b，表示如果bool为true，执行a，如果为false执行b</li>
  <li>for(Point p : this.getVect())表示遍历</li>
  <li>exception:</li>
</ul>

<p><img src="../assets/img/posts/20211130/69.jpg" /></p>

<p>try-catch-finally</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>  
	<span class="o">//</span> <span class="n">可能会发生异常的程序代码</span>  
<span class="p">}</span> <span class="n">catch</span> <span class="p">(</span><span class="n">Type1</span> <span class="n">id1</span><span class="p">){</span>  
	<span class="o">//</span> <span class="n">捕获并处置try抛出的异常类型Type1</span>  
<span class="p">}</span> <span class="n">catch</span> <span class="p">(</span><span class="n">Type2</span> <span class="n">id2</span><span class="p">){</span>  
	 <span class="o">//</span><span class="n">捕获并处置try抛出的异常类型Type2</span>  
<span class="p">}</span><span class="k">finally</span> <span class="p">{</span>  
	<span class="o">//</span> <span class="n">无论是否发生异常</span><span class="err">，</span><span class="n">都将执行的语句块</span>  
<span class="p">}</span>
</code></pre></div></div>
:ET