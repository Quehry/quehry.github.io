I"<h1 id="目录">目录</h1>

<h1 id="1-第一周-枚举">1. 第一周 枚举</h1>

<h2 id="11-完美立方">1.1. 完美立方</h2>
<ul>
  <li>枚举: 基于逐个尝试答案的一种问题求解策略</li>
  <li>例如: 求小于N的最小素数</li>
  <li>完美立方:</li>
</ul>

<center><img src="../assets/img/posts/20220413/1.jpg" /></center>

<ul>
  <li>解题思路:</li>
</ul>

<center><img src="../assets/img/posts/20220413/2.jpg" /></center>

<h2 id="12-生理周期">1.2. 生理周期</h2>
<ul>
  <li>题干:</li>
</ul>

<center><img src="../assets/img/posts/20220413/3.jpg" /></center>

<center><img src="../assets/img/posts/20220413/4.jpg" /></center>

<ul>
  <li>解题思路:</li>
</ul>

<center><img src="../assets/img/posts/20220413/5.jpg" /></center>

<h2 id="13-称硬币">1.3. 称硬币</h2>
<ul>
  <li>题干:</li>
</ul>

<center><img src="../assets/img/posts/20220413/6.jpg" /></center>

<center><img src="../assets/img/posts/20220413/7.jpg" /></center>

<ul>
  <li>解题思路</li>
</ul>

<center><img src="../assets/img/posts/20220413/8.jpg" /></center>

<h2 id="14-熄灯问题">1.4. 熄灯问题</h2>
<ul>
  <li>题干:</li>
</ul>

<center><img src="../assets/img/posts/20220413/9.jpg" /></center>

<center><img src="../assets/img/posts/20220413/10.jpg" /></center>

<center><img src="../assets/img/posts/20220413/11.jpg" /></center>

<ul>
  <li>解题思路:</li>
</ul>

<center><img src="../assets/img/posts/20220413/12.jpg" /></center>

<center><img src="../assets/img/posts/20220413/13.jpg" /></center>

<p>局部的思想，化繁为简</p>

<ul>
  <li>可以用0-31的十进制数来表示第一列的数据，因为其二进制数刚好对应开关的状态</li>
</ul>

<h1 id="2-第二周-递归">2. 第二周 递归</h1>
<h2 id="21-求阶乘">2.1. 求阶乘</h2>
<ul>
  <li>递归的基本概念: 一个函数调用其自身就是递归</li>
</ul>

<center><img src="../assets/img/posts/20220413/14.jpg" /></center>

<ul>
  <li>递归和普通函数调用一样是通过栈实现</li>
</ul>

<center><img src="../assets/img/posts/20220413/15.jpg" /></center>

<ul>
  <li>递归的作用
    <ul>
      <li>替代多重循环</li>
      <li>解决本来就是递归形式定义的问题</li>
      <li>将问题分解为规模更小的问题进行求解: 比如n！变成n * (n-1)</li>
    </ul>
  </li>
</ul>

<h2 id="22-汉诺塔问题">2.2. 汉诺塔问题</h2>
<ul>
  <li>任务描述:</li>
</ul>

<center><img src="../assets/img/posts/20220413/16.jpg" /></center>

<ul>
  <li>解决思路: 把盘子从A移动到C的过程分解为三个小问题，分别是移动n-1个盘子从A到B，然后移动1个盘子从A到C，最后移动n-1个盘子从B到C，这就是一个递归问题</li>
  <li>递归的核心思想是将大问题分解为规模更小的问题，同时还要保证是从n变成n-1</li>
  <li>代码实现:</li>
</ul>

<center><img src="../assets/img/posts/20220413/17.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20220413/18.jpg" /></center>
<p><br /></p>

<h2 id="23-n皇后问题">2.3. n皇后问题</h2>
<ul>
  <li>问题描述:</li>
</ul>

<center><img src="../assets/img/posts/20220413/19.jpg" /></center>

<p>用递归代替多重循环，皇后的攻击范围是横竖斜</p>
<ul>
  <li>解决思路: 同样是从第1行开始逐个往后摆放，但是这里的n是未知数，所以循环的层数不确定，这个时候就可以用递归代替循环，构造一个函数，表示从第k行开始摆放棋子，然后在循环内部判断每一列的位置是否能摆放，就是一个穷举问题了</li>
  <li>代码实现:</li>
</ul>

<center><img src="../assets/img/posts/20220413/20.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20220413/21.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20220413/22.jpg" /></center>
<p><br /></p>

<p>这个代码设计很巧妙的地方是，它会遍历所有的情况，只要是满足条件的就会输出，所以会返回所有可能的结果</p>

<h2 id="24-逆波兰表达式求值">2.4. 逆波兰表达式求值</h2>
:ET