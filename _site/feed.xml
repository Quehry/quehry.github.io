<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-28T15:55:03+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Quehry</title><subtitle>Artificial Intelligence trends and concepts made easy.</subtitle><author><name>Quehry</name></author><entry><title type="html">linux command</title><link href="http://localhost:4000/Linux-Command.html" rel="alternate" type="text/html" title="linux command" /><published>2022-10-24T00:00:00+08:00</published><updated>2022-10-24T00:00:00+08:00</updated><id>http://localhost:4000/Linux-Command</id><content type="html" xml:base="http://localhost:4000/Linux-Command.html"><![CDATA[<h1 id="0-简介">0. 简介</h1>
<p>该博客主要记录了linux常用命令，便于后续使用时查找命令，其余的一些博客:</p>
<ul>
  <li><a href="https://docs.rockylinux.org/books/admin_guide/03-commands" target="_blank">linux command documentation</a></li>
  <li><a href="https://blog.csdn.net/weixin_49851451/article/details/125821580?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-125821580.nonecase&amp;spm=1018.2226.3001.4187" target="_blank">中文博客</a></li>
  <li><a href="https://blog.csdn.net/xulong_08/article/details/81463054" target="_blank">linux相关</a></li>
</ul>

<h1 id="1-zip和unzip">1. zip和unzip</h1>
<ul>
  <li>压缩:
    <pre><code class="language-linux">zip [parameters] target.zip source
</code></pre>
    <p>常用参数有:</p>
    <ol>
      <li>-r 将指定的目录下所有的文件和子目录一并压缩，一般就选择当前目录的文件名即可</li>
      <li>-x 压缩时排除某一文件夹或文件，注意要加引号，因为是字符串，比如<code class="language-plaintext highlighter-rouge">-x "/root/autodl-tmp/txt2img_algorithms/datasets/*"</code></li>
    </ol>
  </li>
  <li>解压
    <pre><code class="language-linux">unzip [parameters] source.zip
</code></pre>
    <p>常用参数有:</p>
    <ol>
      <li>-l 查看zip文件中包含什么</li>
      <li>-t 检查压缩文件是否有问题</li>
      <li>-d 压缩到指定目录</li>
    </ol>
  </li>
</ul>]]></content><author><name>Quehry</name></author><category term="notes" /><summary type="html"><![CDATA[记录Linux常见命令]]></summary></entry><entry><title type="html">算法练习心得</title><link href="http://localhost:4000/Algorithm-Practice.html" rel="alternate" type="text/html" title="算法练习心得" /><published>2022-10-21T00:00:00+08:00</published><updated>2022-10-21T00:00:00+08:00</updated><id>http://localhost:4000/Algorithm-Practice</id><content type="html" xml:base="http://localhost:4000/Algorithm-Practice.html"><![CDATA[<h1 id="简介">简介</h1>
<p>这篇博客记录了做算法题过程的一些心得，目前的想法是先把<a href="http://cxsjsxmooc.openjudge.cn/" target="_blank">网课的习题</a>做完提交完，然后学习C语言面向对象的知识，然后去刷题平台上去刷题</p>

<h1 id="practice">Practice</h1>
<ul>
  <li>iostream头文件包含了cin与cout</li>
  <li><code class="language-plaintext highlighter-rouge">int &amp;a=b</code>中&amp;的用法是C++中的引用用法，变量的引用就是变量的别名，这样就可以实现在函数中向实参传递值</li>
  <li><code class="language-plaintext highlighter-rouge">~</code>的用法之一是按位取反运算，即数的每一位都取反，<code class="language-plaintext highlighter-rouge">^</code>的用法之一是按位异或运算</li>
  <li>stdio.h是C语言的标准库，包含了C语言常用的输入输出函数，比如文件的读写函数fopen/fclose，格式化输入输出函数scanf/printf，为了适配C++，变成了cstdio</li>
  <li>strlen()是string.h的一个函数，可以返回字符串的长度，原理是读到结束字符<strong>\0</strong>后停止</li>
  <li>字符串变量可以通过cin读取键盘输入的字符串，对于由0/1组成的字符串而言，可以考虑用整型存储，然后通过按位运算对整型的每一个bit进行操作</li>
  <li><code class="language-plaintext highlighter-rouge">memcpy()</code>是cstring中的一个函数，使用时需要引用cstring头文件，memcpy(char * a, char * b, int c)表示将字符串b拷贝到字符串a，c表示字符串的大小</li>
  <li>可以将递归嵌套在循环中完成穷举</li>
  <li>全排列的实现有固定的套路: 对排列的每一位进行循环，如果有用过的元素，就标记一下，在下次选取的时候不考虑该元素，这样按着顺序选元素就可以实现全排列，具体见<a href="http://cxsjsxmooc.openjudge.cn/2022t2fall/003/" target="_blank">问题3</a>，全排列也是一个穷举的过程</li>
  <li>定义字符串或者一维数组时，最好还是把元素个数给大一点</li>
  <li>在循环中可以通过bool值来控制某一个元素取还是不取，比如004中的加号可以由布尔值控制</li>
  <li><code class="language-plaintext highlighter-rouge">cin.peek()</code>可以读取当前输入的字符且不取走，<code class="language-plaintext highlighter-rouge">cin.get()</code>可以读取当前输入的字符并且取走</li>
  <li><code class="language-plaintext highlighter-rouge">n = scanf("%c", &amp;c)</code>，如果当前输入停止，则n=EOF</li>
</ul>]]></content><author><name>Quehry</name></author><category term="algorithm" /><summary type="html"><![CDATA[记录刷算法题过程中的心得]]></summary></entry><entry><title type="html">Latent Diffusion Model</title><link href="http://localhost:4000/Latent-Diffusion-Model.html" rel="alternate" type="text/html" title="Latent Diffusion Model" /><published>2022-10-16T00:00:00+08:00</published><updated>2022-10-16T00:00:00+08:00</updated><id>http://localhost:4000/Latent-Diffusion-Model</id><content type="html" xml:base="http://localhost:4000/Latent-Diffusion-Model.html"><![CDATA[<!-- TOC -->

<ul>
  <li><a href="#1-ldm简介">1. LDM简介</a></li>
  <li><a href="#2-模型">2. 模型</a></li>
</ul>

<!-- /TOC -->

<h1 id="1-ldm简介">1. LDM简介</h1>
<p>Latent Diffusion Model(LDM)是Diffusion Model的改进版本。扩散模型相比于之前的生成模型而言，已经能取得非常好的效果，但是扩散模型有个特点，贵。不仅训练贵，而且推理也很贵。为了节省空间和资源，LDM将反向扩散过程在隐空间中进行，而不是之前的逐像素进行反向扩散(因为隐空间的维度比原始图片要小，能让训练和推断变得不那么贵)。LDM与扩散模型最大的区别就是隐空间，模型在github上开源，stable diffusion也是基于latent diffusion进行实现</p>
<ul>
  <li><a href="https://arxiv.org/abs/2112.10752" target="_blank">LDM</a></li>
  <li><a href="https://github.com/CompVis/latent-diffusion" target="_blank">github</a></li>
</ul>

<h1 id="2-模型">2. 模型</h1>
<p>LDM的模型如下图所示:</p>

<center><img src="../assets/img/posts/20221016/2.jpg" /></center>

<ul>
  <li>前向扩散: 输入x首先经过压缩后得到隐空间表达z，正常的前向扩散得到$z_T$</li>
  <li>反向扩散: 隐空间的随机噪声$z_T$经过T步去噪U-Net后得到z，然后z经过解压得到原始大小的图片$\tilde{x}$</li>
</ul>

<p>我们关心的是模型反向扩散的过程，关于图片压缩和解压的模型，作者尝试了VAE和VQVAE，返现VAE的表现稍微好一点，所以选择了VAE作为antoencoder。与一般的扩散模型一样，LDM也可以做条件生成，LDM采取的策略是classifier-free guidance，具体实现方法是将预处理好的y与U-Net的每一个中间表达都应用注意力机制，其中查询是U-Net的中间层表达，key和value是预处理好的y。预处理的encoder与y相关，如果y是文本，那么encoder可以是clip的text encoder，也可以是transformer-based encoder</p>

<center><img src="../assets/img/posts/20221016/3.jpg" /></center>]]></content><author><name>Quehry</name></author><category term="notes" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">扩散模型</title><link href="http://localhost:4000/Diffusion-Model.html" rel="alternate" type="text/html" title="扩散模型" /><published>2022-10-12T00:00:00+08:00</published><updated>2022-10-12T00:00:00+08:00</updated><id>http://localhost:4000/Diffusion-Model</id><content type="html" xml:base="http://localhost:4000/Diffusion-Model.html"><![CDATA[<!-- TOC -->

<ul>
  <li><a href="#1-扩散模型简介">1. 扩散模型简介</a></li>
  <li><a href="#2-模型">2. 模型</a>
    <ul>
      <li><a href="#21-前向扩散">2.1. 前向扩散</a></li>
      <li><a href="#22-反向扩散过程">2.2. 反向扩散过程</a></li>
      <li><a href="#23-损失函数">2.3. 损失函数</a></li>
      <li><a href="#24-ddpm中给出的训练与采样生成过程">2.4. DDPM中给出的训练与采样(生成)过程</a></li>
      <li><a href="#25-小结">2.5. 小结</a></li>
    </ul>
  </li>
  <li><a href="#3-一些技巧和主要网络结构">3. 一些技巧和主要网络结构</a>
    <ul>
      <li><a href="#31-\beta_t和\sigma_\theta的取值">3.1. $\beta_t$和$\Sigma_\theta$的取值</a></li>
      <li><a href="#32-加速扩散模型采样的技巧">3.2. 加速扩散模型采样的技巧</a></li>
      <li><a href="#33-u-net">3.3. U-Net</a></li>
    </ul>
  </li>
  <li><a href="#4-条件生成">4. 条件生成</a>
    <ul>
      <li><a href="#41-classifier-guided-diffusion">4.1. Classifier Guided Diffusion</a></li>
      <li><a href="#42-classifier-free-guidance">4.2. Classifier-Free Guidance</a></li>
      <li><a href="#43-scale-up-generation-resolution-and-quality">4.3. Scale up Generation Resolution and Quality</a></li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h1 id="1-扩散模型简介">1. 扩散模型简介</h1>
<p>扩散模型(Diffusion Model)是深度生成模型中的SOTA，相比于GAN、VAE、Flow-based这些生成模型而言，扩散模型可以取得更好的效果。扩散模型受非平衡热力学启发，它定义了一条多时间步的马尔可夫链来逐步给图片添加噪声，如果时间步够大，最终图片会变成纯噪声，扩散模型的目的是学习反向的扩散过程，也就是输入随机噪声，能返回一张图片，相比于之前提到的各种生成模型而言，扩散模型具有相对固定的学习步骤，同时隐变量维度更高(和输入数据同样的维度)</p>

<center><img src="../assets/img/posts/20221012/2.jpg" /></center>

<p>扩散模型的早在2015年便提出了(<a href="https://arxiv.org/abs/1503.03585" target="_blank">论文链接</a>)，但在当时没有引起广泛的关注，直到2019年<a href="https://arxiv.org/abs/1907.05600" target="_blank">NCSN</a>和2020年<a href="https://arxiv.org/abs/2006.11239" target="_blank">DDPM</a>的出现才将扩散模型引入了新高度，2022年火爆的text2image模型GLIDE、DALLE2、Latent Diffusion、Imagen的相继提出，让扩散模型火出了圈，这篇博客将对扩散模型的前向计算、反向训练、训练、生成步骤及其数学原理做详细的整理，会列出很多数学公式，同时该博客也参考了很多相关资料，这里我一并列出</p>

<ul>
  <li><a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/" target="_blank">Lil blog, 一篇整理相当详尽的博客，也是我主要的参考对象</a></li>
  <li><a href="https://huggingface.co/blog/annotated-diffusion" target="_blank">huggingface的一篇解释简单明了的博客</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/525106459" target="_blank">知乎上一篇中文博客</a></li>
  <li><a href="https://arxiv.org/abs/2006.11239" target="_blank">DDPM</a></li>
  <li><a href="https://arxiv.org/abs/2209.00796" target="_blank">一篇综述</a></li>
  <li><a href="https://arxiv.org/abs/2102.09672" target="_blank">Improved DDPM</a></li>
  <li><a href="https://arxiv.org/abs/2105.05233" target="_blank">Diffusion Models Beat GANs</a></li>
  <li><a href="https://arxiv.org/abs/2112.10741" target="_blank">GLIDE</a></li>
  <li><a href="https://arxiv.org/abs/2106.15282" target="_blank">Cascaded Diffusion Model</a></li>
</ul>

<h1 id="2-模型">2. 模型</h1>
<h2 id="21-前向扩散">2.1. 前向扩散</h2>
<p>从原始数据分布中采样$x_0$, 假设$x_0\sim q(x)$，前向扩散过程就是在每一个时间步都加上一个高斯噪声，这样就可以从最初的$x_0$生成长度为T的噪声序列$x_1, x_2, x_3,…, x_T$，每一步都用variance schedule$\beta_t$控制，其中$\beta_t\in (0, 1)$，每一步的后验分布(预定义好的)为:</p>

<p>
\begin{equation}
q(\mathbf{x}_t \vert \mathbf{x}_{t-1}) = \mathcal{N}(\mathbf{x}_t; \sqrt{1 - \beta_t} \mathbf{x}_{t-1}, \beta_t\mathbf{I}) \quad
q(\mathbf{x}_{1:T} \vert \mathbf{x}_0) = \prod^T_{t=1} q(\mathbf{x}_t \vert \mathbf{x}_{t-1})
\end{equation}
</p>

<p>这个前向传播的过程中有一个非常好的性质，就是我们可以在任意时间步采样得到$x_t$，为了实现这个技巧，我们需要用到reparameterization技巧(该技巧也在VAE中出现过)，重参数化技巧的本质就是将随机采样的z通过引入高斯噪声$\epsilon$变成确定性的z，也就是上面的$x_t$可以表示为$x_t=\sqrt{1-\beta_t}x_{t-1}+\sqrt{\beta_t}\epsilon$，这样有利于梯度的逆传播，那么我们可以推出以下公式:</p>

<p>
\begin{equation}
\begin{aligned}
\mathbf{x}_t 
&amp;= \sqrt{\alpha_t}\mathbf{x}_{t-1} + \sqrt{1 - \alpha_t}\boldsymbol{\epsilon}_{t-1} \\
&amp;= \sqrt{\alpha_t \alpha_{t-1}} \mathbf{x}_{t-2} + \sqrt{1 - \alpha_t \alpha_{t-1}} \bar{\boldsymbol{\epsilon}}_{t-2} \\
&amp;= \dots \\
&amp;= \sqrt{\bar{\alpha}_t}\mathbf{x}_0 + \sqrt{1 - \bar{\alpha}_t}\boldsymbol{\epsilon} \\
q(\mathbf{x}_t \vert \mathbf{x}_0) &amp;= \mathcal{N}(\mathbf{x}_t; \sqrt{\bar{\alpha}_t} \mathbf{x}_0, (1 - \bar{\alpha}_t)\mathbf{I})
\end{aligned}
\end{equation}
</p>

<p>其中$\epsilon_t$都是均值为0，方差为1的高斯噪声，$\alpha_t=1-\beta_t$, $\bar{\alpha_t}=\prod_{i=1}^t\alpha_i$, 注:两个均值相同高斯噪声可以合并成一个高斯噪声，方差为之前方差的平方和开根号，一般来说，$\beta_1&lt;\beta_2&lt;…&lt;\beta_T$</p>

<h2 id="22-反向扩散过程">2.2. 反向扩散过程</h2>

<center><img src="../assets/img/posts/20221012/3.jpg" /></center>

<p>如果我们可以将前向传播的过程反向，那么我们就可以获得后验分布$q(x_{t-1}|x_{t})$，那么我们就可以利用马尔科夫链的性质，输入高斯噪声，然后获得生成的照片，但是，我们无法高效地得到$q(x_{t-1}|x_{t})$，于是我们希望学习出分布$p_\theta$来模拟后验分布$q(x_{t-1}|x_{t})$，由于前向扩散的过程中我们假设后验分布是高斯分布，所以这里我们也假设$p_\theta$是高斯分布，于是我们有:</p>

<p>
\begin{equation}
p_\theta(\mathbf{x}_{0:T}) = p(\mathbf{x}_T) \prod^T_{t=1} p_\theta(\mathbf{x}_{t-1} \vert \mathbf{x}_t) \quad
p_\theta(\mathbf{x}_{t-1} \vert \mathbf{x}_t) = \mathcal{N}(\mathbf{x}_{t-1}; \boldsymbol{\mu}_\theta(\mathbf{x}_t, t), \boldsymbol{\Sigma}_\theta(\mathbf{x}_t, t))
\end{equation}
</p>

<p>其中分布$p_\theta$中的均值$\mu$和方差$\Sigma$与时间步t和输入$x_t$有关</p>

<p>虽然我们不知道$q(x_{t-1}|x_t)$的分布情况，但是我们可以知道$q(\mathbf{x}_{t-1} \vert \mathbf{x}_t, \mathbf{x}_0)$的分布情况，推导过程如下:</p>

<p style="font-size: 14px">
\begin{equation}
\begin{aligned}
q\left(\mathbf{x}_{t-1} \mid \mathbf{x}_t, \mathbf{x}_0\right) &amp;=q\left(\mathbf{x}_t \mid \mathbf{x}_{t-1}, \mathbf{x}_0\right) \frac{q\left(\mathbf{x}_{t-1} \mid \mathbf{x}_0\right)}{q\left(\mathbf{x}_t \mid \mathbf{x}_0\right)} \\
&amp; \propto \exp \left(-\frac{1}{2}\left(\frac{\left(\mathbf{x}_t-\sqrt{\alpha_t} \mathbf{x}_{t-1}\right)^2}{\beta_t}+\frac{\left(\mathbf{x}_{t-1}-\sqrt{\bar{\alpha}_{t-1}} \mathbf{x}_0\right)^2}{1-\bar{\alpha}_{t-1}}-\frac{\left(\mathbf{x}_t-\sqrt{\bar{\alpha}_t} \mathbf{x}_0\right)^2}{1-\bar{\alpha}_t}\right)\right) \\
&amp;=\exp \left(-\frac{1}{2}\left(\frac{\mathbf{x}_t^2-2 \sqrt{\alpha_t} \mathbf{x}_t \mathbf{x}_{t-1}+\alpha_t \mathbf{x}_{t-1}^2}{\beta_t}+\frac{\mathbf{x}_{t-1}^2-2 \sqrt{\bar{\alpha}_{t-1}} \mathbf{x}_0 \mathbf{x}_{t-1}+\bar{\alpha}_{t-1} \mathbf{x}_0^2}{1-\bar{\alpha}_{t-1}}-\frac{\left(\mathbf{x}_t-\sqrt{\bar{\alpha}_t} \mathbf{x}_0\right)^2}{1-\bar{\alpha}_t}\right)\right) \\
&amp;=\exp \left(-\frac{1}{2}\left(\left(\frac{\alpha_t}{\beta_t}+\frac{1}{1-\bar{\alpha}_{t-1}}\right) \mathbf{x}_{t-1}^2-\left(\frac{2 \sqrt{\alpha_t}}{\beta_t} \mathbf{x}_t+\frac{2 \sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}} \mathbf{x}_0\right) \mathbf{x}_{t-1}+C\left(\mathbf{x}_t, \mathbf{x}_0\right)\right)\right)
\end{aligned}
\end{equation}
</p>

<p>其中函数$C(x_t, x_0)$与$x_{t-1}$无关，根据上述式子我们可以得出$q(x_{t-1}|x_t,x_0)$满足正态分布，均值和标准差分别为$\tilde{\mu_t}$和$\tilde{\beta_t}$，表达式分别为:</p>

<p>
\begin{equation}
\begin{aligned}
\tilde{\beta}_t 
&amp;= 1/(\frac{\alpha_t}{\beta_t} + \frac{1}{1 - \bar{\alpha}_{t-1}}) 
= 1/(\frac{\alpha_t - \bar{\alpha}_t + \beta_t}{\beta_t(1 - \bar{\alpha}_{t-1})})
= \frac{1 - \bar{\alpha}_{t-1}}{1 - \bar{\alpha}_t} \cdot \beta_t \\
\tilde{\boldsymbol{\mu}}_t (\mathbf{x}_t, \mathbf{x}_0)
&amp;= (\frac{\sqrt{\alpha_t}}{\beta_t} \mathbf{x}_t + \frac{\sqrt{\bar{\alpha}_{t-1} }}{1 - \bar{\alpha}_{t-1}} \mathbf{x}_0)/(\frac{\alpha_t}{\beta_t} + \frac{1}{1 - \bar{\alpha}_{t-1}}) \\
&amp;= (\frac{\sqrt{\alpha_t}}{\beta_t} \mathbf{x}_t + \frac{\sqrt{\bar{\alpha}_{t-1} }}{1 - \bar{\alpha}_{t-1}} \mathbf{x}_0) \frac{1 - \bar{\alpha}_{t-1}}{1 - \bar{\alpha}_t} \cdot \beta_t \\
&amp;= \frac{\sqrt{\alpha_t}(1 - \bar{\alpha}_{t-1})}{1 - \bar{\alpha}_t} \mathbf{x}_t + \frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1 - \bar{\alpha}_t} \mathbf{x}_0\\
\end{aligned}
\end{equation}
</p>

<p>于是最终可以得到$q(x_{t-1}|x_t,x_0)$:</p>

<p>
\begin{equation}
q(\mathbf{x}_{t-1} \vert \mathbf{x}_t, \mathbf{x}_0) = \mathcal{N}(\mathbf{x}_{t-1}; \tilde{\boldsymbol{\mu}}(\mathbf{x}_t, \mathbf{x}_0), \tilde{\beta}_t \mathbf{I})
\end{equation}
</p>

<p>在根据马尔可夫链我们有: $\mathbf{x}_0 = \frac{1}{\sqrt{\bar{\alpha}_t}}(\mathbf{x}_t - \sqrt{1 - \bar{\alpha}_t}\boldsymbol{\epsilon}_t)$，注意这里的$\epsilon_t$并不是任意的一个噪声，而是让$x_0$变成$x_t$的噪声，那么$\tilde{\mu_t}$可以表示为:</p>

<p>
\begin{equation}
\begin{aligned}
\tilde{\boldsymbol{\mu}}_t
&amp;= \frac{\sqrt{\alpha_t}(1 - \bar{\alpha}_{t-1})}{1 - \bar{\alpha}_t} \mathbf{x}_t + \frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1 - \bar{\alpha}_t} \frac{1}{\sqrt{\bar{\alpha}_t}}(\mathbf{x}_t - \sqrt{1 - \bar{\alpha}_t}\boldsymbol{\epsilon}_t) \\
&amp;= \frac{1}{\sqrt{\alpha_t}} \Big( \mathbf{x}_t - \frac{1 - \alpha_t}{\sqrt{1 - \bar{\alpha}_t}} \boldsymbol{\epsilon}_t \Big)
\end{aligned}
\end{equation}
</p>

<h2 id="23-损失函数">2.3. 损失函数</h2>
<p>和VAE类似，也可以用Variational Lower Bound来最大边缘似然函数$p_\theta(x_0)$:</p>

<p>
\begin{equation}
\begin{aligned}
- \log p_\theta(\mathbf{x}_0) 
&amp;\leq - \log p_\theta(\mathbf{x}_0) + D_\text{KL}(q(\mathbf{x}_{1:T}\vert\mathbf{x}_0) \| p_\theta(\mathbf{x}_{1:T}\vert\mathbf{x}_0) ) \\
&amp;= -\log p_\theta(\mathbf{x}_0) + \mathbb{E}_{\mathbf{x}_{1:T}\sim q(\mathbf{x}_{1:T} \vert \mathbf{x}_0)} \Big[ \log\frac{q(\mathbf{x}_{1:T}\vert\mathbf{x}_0)}{p_\theta(\mathbf{x}_{0:T}) / p_\theta(\mathbf{x}_0)} \Big] \\
&amp;= -\log p_\theta(\mathbf{x}_0) + \mathbb{E}_q \Big[ \log\frac{q(\mathbf{x}_{1:T}\vert\mathbf{x}_0)}{p_\theta(\mathbf{x}_{0:T})} + \log p_\theta(\mathbf{x}_0) \Big] \\
&amp;= \mathbb{E}_q \Big[ \log \frac{q(\mathbf{x}_{1:T}\vert\mathbf{x}_0)}{p_\theta(\mathbf{x}_{0:T})} \Big] \\
\text{Let }L_\text{VLB} 
&amp;= \mathbb{E}_{q(\mathbf{x}_{0:T})} \Big[ \log \frac{q(\mathbf{x}_{1:T}\vert\mathbf{x}_0)}{p_\theta(\mathbf{x}_{0:T})} \Big] \geq - \mathbb{E}_{q(\mathbf{x}_0)} \log p_\theta(\mathbf{x}_0)
\end{aligned}
\end{equation}
</p>

<p>由于这里取了-log，所以目标变成了最小化VLB损失函数，经过一系列漫长的推导，我们可以得到(中间步骤其后就是用马尔科夫链和贝叶斯定理把条件概率拆开):</p>

<p>
\begin{equation}
\begin{aligned}
L_\text{VLB} &amp;= L_T + L_{T-1} + \dots + L_0 \\
\text{where } L_T &amp;= D_\text{KL}(q(\mathbf{x}_T \vert \mathbf{x}_0) \parallel p_\theta(\mathbf{x}_T)) \\
L_t &amp;= D_\text{KL}(q(\mathbf{x}_t \vert \mathbf{x}_{t+1}, \mathbf{x}_0) \parallel p_\theta(\mathbf{x}_t \vert\mathbf{x}_{t+1})) \text{ for }1 \leq t \leq T-1 \\
L_0 &amp;= - \log p_\theta(\mathbf{x}_0 \vert \mathbf{x}_1)
\end{aligned}
\end{equation}
</p>

<p>参数化损失函数中的$L_t$: 反向扩散的目标是用神经网络来拟合后验分布$p_\theta(x_{t-1} \vert x_t) = N(x_{t-1}; \mu_\theta(x_t, t), \Sigma_\theta(x_t, t))$，根据损失函数$L_t$可知，反向扩散训练的目标是: 给定t和$x_t$, $\mu_\theta$的结果和$\tilde{\mu_t}$更接近，因为任意$x_t$在给定$x_0$的情况下都可以求出，我们可以参数化高斯噪声，把反向扩散的目标变成让$\epsilon_t$和$\epsilon_\theta$更接近</p>

<p>
\begin{equation}
\begin{aligned}
\boldsymbol{\mu}_\theta(\mathbf{x}_t, t) &amp;= \frac{1}{\sqrt{\alpha_t}} \Big( \mathbf{x}_t - \frac{1 - \alpha_t}{\sqrt{1 - \bar{\alpha}_t}} \boldsymbol{\epsilon}_\theta(\mathbf{x}_t, t) \Big) \\
\end{aligned}
\end{equation}
</p>

<p>损失函数$L_t$为:</p>

<p style="font-size: 20px">
\begin{equation}
\begin{aligned}
L_t 
&amp;= \mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon}} \Big[\frac{1}{2 \| \boldsymbol{\Sigma}_\theta(\mathbf{x}_t, t) \|^2_2} \| \tilde{\boldsymbol{\mu}}_t(\mathbf{x}_t, \mathbf{x}_0) - \boldsymbol{\mu}_\theta(\mathbf{x}_t, t) \|^2 \Big] \\
&amp;= \mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon}} \Big[\frac{1}{2  \|\boldsymbol{\Sigma}_\theta \|^2_2} \| \frac{1}{\sqrt{\alpha_t}} \Big( \mathbf{x}_t - \frac{1 - \alpha_t}{\sqrt{1 - \bar{\alpha}_t}} \boldsymbol{\epsilon}_t \Big) - \frac{1}{\sqrt{\alpha_t}} \Big( \mathbf{x}_t - \frac{1 - \alpha_t}{\sqrt{1 - \bar{\alpha}_t}} \boldsymbol{\boldsymbol{\epsilon}}_\theta(\mathbf{x}_t, t) \Big) \|^2 \Big] \\
&amp;= \mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon}} \Big[\frac{ (1 - \alpha_t)^2 }{2 \alpha_t (1 - \bar{\alpha}_t) \| \boldsymbol{\Sigma}_\theta \|^2_2} \|\boldsymbol{\epsilon}_t - \boldsymbol{\epsilon}_\theta(\mathbf{x}_t, t)\|^2 \Big] \\
&amp;= \mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon}} \Big[\frac{ (1 - \alpha_t)^2 }{2 \alpha_t (1 - \bar{\alpha}_t) \| \boldsymbol{\Sigma}_\theta \|^2_2} \|\boldsymbol{\epsilon}_t - \boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0 + \sqrt{1 - \bar{\alpha}_t}\boldsymbol{\epsilon}_t, t)\|^2 \Big] 
\end{aligned}
\end{equation}
</p>

<h2 id="24-ddpm中给出的训练与采样生成过程">2.4. DDPM中给出的训练与采样(生成)过程</h2>
<center><img src="../assets/img/posts/20221012/4.jpg" /></center>

<p>训练过程:</p>
<ol>
  <li>采样一个$x_0$</li>
  <li>任选一个时间t</li>
  <li>随机采样一个高斯噪声$\epsilon$</li>
  <li>计算损失函数的梯度，更新参数$\theta$</li>
</ol>

<p>采样过程:</p>
<ol>
  <li>采样一个高斯噪声$x_T$</li>
  <li>从时间T开始，每一步采样一个高斯噪声z，利用重参数化，得到上一步的$x_{t-1}$，重复T次，最终得到生成的$x_0$</li>
</ol>

<p>注意这里还没有给出$\epsilon_\theta(x_t, t)$的网络结构，DDPM使用U-Net作为其网络结构(后面会具体展开)</p>

<h2 id="25-小结">2.5. 小结</h2>
<p>简单来说，扩散模型的前向扩散过程都是定义好的马尔可夫链，每一步都需要使用重参数化技巧来添加噪声，这里每一步的后验分布的参数都是预定义好的。反向扩散过程就是用噪声生成原始图片的过程，和VAE类似，用分布$p_\theta(x_{t-1}|x_t)$来拟合真实的后验分布$q(x_{t-1}|x_t)$，所以生成过程最重要的就是训练出合适的分布来拟合，通过VLB和重参数化的技巧，最终可以把训练过程看成给一个高斯噪声，拟合成前向扩散的噪声。这里的网络结构一般使用的是U-Net</p>

<h1 id="3-一些技巧和主要网络结构">3. 一些技巧和主要网络结构</h1>
<h2 id="31-beta_t和sigma_theta的取值">3.1. $\beta_t$和$\Sigma_\theta$的取值</h2>
<p>关于$\beta_t$的取值，DDPM的做法是$\beta_1=10^{-4}$到$\beta_T=0.02$线性取值，这样的扩散模型取得的效果不算最好，<a href="https://arxiv.org/abs/2102.09672" target="_blank">Improved DDPM</a>提出了一种新的取值方法:</p>

<p>
\begin{equation}
\beta_t = \text{clip}(1-\frac{\bar{\alpha}_t}{\bar{\alpha}_{t-1}}, 0.999) \quad\bar{\alpha}_t = \frac{f(t)}{f(0)}\quad\text{where }f(t)=\cos\Big(\frac{t/T+s}{1+s}\cdot\frac{\pi}{2}\Big)
\end{equation}
</p>

<p>关于$\Sigma_\theta$的取值方法，DDPM采用固定的$\Sigma_\theta$(不学习)，可以取$\beta_t$或者$\tilde{\beta_t}=\frac{1 - \bar{\alpha_{t-1}}}{1 - \bar{\alpha_t}} \cdot \beta_t$，Improved DDPM采用可学习的$\Sigma_\theta$参数，利用线性插值的方法:</p>

<p>
\begin{equation}
\boldsymbol{\Sigma}_\theta(\mathbf{x}_t, t) = \exp(\mathbf{v} \log \beta_t + (1-\mathbf{v}) \log \tilde{\beta}_t)
\end{equation}
</p>

<p>由于损失函数中没有关于$\Sigma_\theta$的梯度，所以需要对损失函数进行一点更改</p>

<h2 id="32-加速扩散模型采样的技巧">3.2. 加速扩散模型采样的技巧</h2>
<p>DDPM的作者对比了扩散模型和其他生成模型的生成速度，发现DDPM的生成速度远小于其他生成模型，有一些加速模型采样的技巧:</p>
<ol>
  <li>缩短采样步骤，比如每隔T/S步才采样一次</li>
  <li><a href="https://arxiv.org/abs/2010.02502" target="_blank">DDIM</a>论文里提出的技巧，在采样过程中只需要采样一个子集的步骤便可做生成</li>
  <li><a href="https://arxiv.org/abs/2112.10752" target="_blank">Latent Diffusion Model</a>论文提出让扩散过程在隐空间中进行，而不是在像素空间中进行，这样可以让训练代价更小，推断过程更快，后续会整理LDM论文</li>
</ol>

<h2 id="33-u-net">3.3. U-Net</h2>
<p>很多扩散模型的噪声网络结构都是基于<a href="https://arxiv.org/pdf/1505.04597.pdf" target="_blank">U-Net</a>，U-Net的网络结构如下图:</p>

<center><img src="../assets/img/posts/20221012/5.jpg" /></center>

<p>模型可以分为两个部分，左边用于特征的抽取，右边部分用于上采样，由于网络结构酷似字母U而得名。U-Net网络结构又可以看成AutoEncoder的结构，它的bottleneck就是中间的低纬度特征表示，U-Net要保证输出的噪声和输入的噪声有相同的维度，是一个自回归模型。DDPM使用的是PixelCNN++的backbone，也就是基于Wide Resnet的U-Net，也就是说encoder和decoder之间是残差连接，输入$x_t$返回噪声(残差思想)</p>

<h1 id="4-条件生成">4. 条件生成</h1>
<p>条件生成就是conditioned generation，通过输入额外的conditioning information来生成图片，比如一段提示词或者生成图片的类别</p>

<h2 id="41-classifier-guided-diffusion">4.1. Classifier Guided Diffusion</h2>
<p>博客上讲解的关于classifier guidance的部分不太详尽，于是我去翻看了Classifier Guidance的论文<a href="https://arxiv.org/abs/2105.05233" target="_blank">Diffusion Models Beat GANs</a>:</p>

<p>classifier guidance的思路来源于GAN模型的条件生成，将这种条件生成应用于扩散模型后，发现效果非常好。作者提出可以训练一个分类器$p_\phi(y|x_t, t)$，然后把$\nabla_{x_t} \log p_\phi\left(y \mid x_t, t\right)$的加到总的梯度公式里面，来指导扩散模型<strong>采样的过程</strong>偏向于生成类别为y的图片</p>

<p>没有classifier guidance之前的反向扩散分布函数为: $p_\theta(x_t|x_{t+1})$，但是有了classifier guidance之后，反向扩散的后验分布函数变成了:</p>

<p>
\begin{equation}
p_{\theta, \phi}(x_t|x_{t+1}, y) = Zp_\theta(x_t|x_{t+1})p_\phi(y|x_t)
\end{equation}
</p>

<p>其中Z是正则化的常数，接下来我们需要化简上面这个公式，首先我们知道$p_\theta(x_t|x_{t+1})$本质上就是正态分布:</p>

<p>
\begin{equation}
p_\theta(x_t|x_{t+1})=\mathcal{N}(\mu, \Sigma)
\end{equation}
</p>

<p>然后我们对$log_\phi p(y|x_t)$在$x=\mu$处进行泰勒展开:</p>

<p>
\begin{equation}
\begin{aligned}
\log p_\phi(y \mid x_t) &amp; \approx log p_\phi (y \mid x_t) \mid _{x_t=\mu}+(x_t-\mu)\nabla_{x_t}logp_\phi(y \mid x_t)\mid _{x_t=\mu} \\
&amp;=(x_t-\mu)g+C_1\\
\end{aligned}
\end{equation}
</p>

<p>这里$g=\nabla_{x_t}logp_\phi(y \mid x_t)\mid _{x_t=\mu}$</p>

<p style="font-size: 18px">
\begin{equation}
\begin{aligned}
\log \left(p_\theta\left(x_t \mid x_{t+1}\right) p_\phi\left(y \mid x_t\right)\right) &amp; \approx-\frac{1}{2}\left(x_t-\mu\right)^T \Sigma^{-1}\left(x_t-\mu\right)+\left(x_t-\mu\right) g+C_2 \\
&amp;=-\frac{1}{2}\left(x_t-\mu-\Sigma g\right)^T \Sigma^{-1}\left(x_t-\mu-\Sigma g\right)+\frac{1}{2} g^T \Sigma g+C_2 \\
&amp;=-\frac{1}{2}\left(x_t-\mu-\Sigma g\right)^T \Sigma^{-1}\left(x_t-\mu-\Sigma g\right)+C_3 \\
&amp;=\log p(z)+C_4, z \sim \mathcal{N}(\mu+\Sigma g, \Sigma)
\end{aligned}
\end{equation}
</p>

<p>那么反向扩散过程就可以看成均值为$\mu+\Sigma g$，方差为$\Sigma$的正态分布，那么我们有以下采样算法:</p>

<center><img src="../assets/img/posts/20221012/6.jpg" /></center>

<p>另一种思路是修改正态分布中的噪声函数，原本的梯度为:</p>

<p>
\begin{equation}
\nabla _{x_t} log p_\theta (x_t) = - \frac{1}{\sqrt{1-\overline{\alpha_t}}} \epsilon_\theta (x_t)
\end{equation}
</p>

<p>修改反向扩散函数后的梯度为:</p>

<p>
\begin{equation}
\begin{aligned}
\nabla _{x_t} log (p_\theta (x_t) p_\phi (y \mid x_t))  &amp;= \nabla _{x_t} log p_\theta (x_t) + \nabla _{x_t} log p_\phi (y \mid x_t) \\
&amp;= - \frac{1}{\sqrt{1-\overline{\alpha_t}}} \epsilon_\theta (x_t) + \nabla _{x_t} log p_\phi (y \mid x_t)
\end{aligned}
\end{equation}
</p>

<p>那么根据梯度，我们可以定义一个新的噪声预测函数$\hat{\epsilon}$:</p>

<p>
\begin{equation}
\hat{\epsilon(x_t)} := \epsilon_\theta(x_t) - \sqrt{1-\overline{\alpha_t}} \nabla _{x_t} log p_\phi(y \mid x_t)
\end{equation}
</p>

<p>该方法对应的算法为:</p>

<center><img src="../assets/img/posts/20221012/7.jpg" /></center>

<h2 id="42-classifier-free-guidance">4.2. Classifier-Free Guidance</h2>
<p>上一小节提到的classifier guidance的技巧是需要单独使用一个分类器(参与训练或者不参与训练的情况都有)来获得$x_t$的类别，根据不同的class可以使用不同的分类器，比如resnet可以进行图片类别的guidance，CLIP可以进行文本的guidance等等。如果我们没有这个单独的分类器，我们也可以利用classifier-free guidance的技巧来实现条件生成，同样地，为了更详尽地了解这个技巧，我去翻看了<a href="https://arxiv.org/abs/2112.10741" target="_blank">GLIDE</a>论文中关于classifier-free guidance的介绍</p>

<p>classifier-free guidance并不需要模型去单独给出一个分类器，而是将条件生成与非条件生成都用同一个函数表示，即$\epsilon(x_t\mid y)$，如果我们希望这个函数表示非条件生成，那么我们只需要将y替换成空集即可，在训练过程中，我们以相同的概率随机替换y为空集。采样时，反向扩散函数为$\epsilon_\theta(x_t \mid y)$和$\epsilon_\theta(x_t \mid \emptyset)$的线性插值:</p>

<p>
\begin{equation}
\hat{\epsilon_\theta}(x_t \mid y)=\epsilon_\theta(x_t\mid \emptyset) + s \cdot (\epsilon_\theta(x_t\mid y)-\epsilon_\theta(x_t\mid \emptyset))
\end{equation}
</p>

<p>式子中的s是guidance scale，s越大代表生成的图片越靠近y，guidance-free的技巧出现后，大家发现它的效果非常好，于是后续的模型基本上都运用了该技巧，比如GLIDE、DALLE2、Imagen</p>

<h2 id="43-scale-up-generation-resolution-and-quality">4.3. Scale up Generation Resolution and Quality</h2>
<p>为了生成更高质量和更高分辨率的图片，可以将扩散模型与超分辨率的技术相结合，论文<a href="https://arxiv.org/abs/2106.15282" target="_blank">Cascaded Diffusion Model</a>中提出用层级式的扩散模型来做图片的超分辨率生成，模型的结构如下图:</p>

<center><img src="../assets/img/posts/20221012/8.jpg" /></center>

<p>模型由三个子模型组成，分别是一个基础的扩散模型和两个超分辨率扩散模型，注意这里的每个子模型都需要输入类别，超分辨率子模型还需要输入上一个子模型的低分辨率结果，这些子模型都是conditional的。超分辨率扩散模型与普通的扩散模型的区别是损失函数和反向扩散函数不同，具体来说就是U-Net的结构不同，超分辨率的U-Net的输出维度比输入维度要大，而且输入为低分辨率的图片、高分辨率的图片、类别:</p>

<center><img src="../assets/img/posts/20221012/9.jpg" /></center>

<p>一个two-stage的cascaded模型的训练算法为:</p>

<center><img src="../assets/img/posts/20221012/10.jpg" /></center>

<p>一个two-stage的cascaded模型的采样算法为:</p>

<center><img src="../assets/img/posts/20221012/11.jpg" /></center>]]></content><author><name>Quehry</name></author><category term="notes" /><summary type="html"><![CDATA[collect and arrange information and principle of diffusion model]]></summary></entry><entry><title type="html">短文本评估论文阅读整理</title><link href="http://localhost:4000/short-answer-assessment.html" rel="alternate" type="text/html" title="短文本评估论文阅读整理" /><published>2022-10-10T00:00:00+08:00</published><updated>2022-10-10T00:00:00+08:00</updated><id>http://localhost:4000/short-answer-assessment</id><content type="html" xml:base="http://localhost:4000/short-answer-assessment.html"><![CDATA[<!-- TOC -->

<ul>
  <li><a href="#1-论文简介">1. 论文简介</a></li>
  <li><a href="#2-bert-based-deep-neural-networks">2. BERT-Based Deep Neural Networks</a>
    <ul>
      <li><a href="#21-abstract">2.1. Abstract</a></li>
      <li><a href="#22-introduction">2.2. Introduction</a></li>
      <li><a href="#23-related-work">2.3. Related Work</a>
        <ul>
          <li><a href="#231-applications-of-deep-learning-in-asag-tasks">2.3.1. Applications of Deep Learning in ASAG Tasks</a></li>
          <li><a href="#232-bert-model-and-its-application-in-education">2.3.2. BERT Model and Its Application in Education</a></li>
        </ul>
      </li>
      <li><a href="#24-methodology">2.4. Methodology</a>
        <ul>
          <li><a href="#241-task-definition">2.4.1. Task Definition</a></li>
          <li><a href="#242-model">2.4.2. Model</a>
            <ul>
              <li><a href="#2421-bert-layer">2.4.2.1. BERT layer</a></li>
              <li><a href="#2422-semantic-refinement-layer">2.4.2.2. Semantic Refinement Layer</a></li>
              <li><a href="#2423-semantic-fusion-layer">2.4.2.3. Semantic Fusion Layer</a></li>
              <li><a href="#2424-prediction-layer">2.4.2.4. Prediction Layer</a></li>
              <li><a href="#2425-loss-function">2.4.2.5. Loss Function</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#25-experiments">2.5. Experiments</a>
        <ul>
          <li><a href="#251-datasets">2.5.1. Datasets</a></li>
          <li><a href="#252-experimental-settings">2.5.2. Experimental Settings</a></li>
          <li><a href="#253-ablation-studies">2.5.3. Ablation Studies</a></li>
          <li><a href="#254-comparison-with-baseline-systems">2.5.4. Comparison With Baseline Systems</a></li>
        </ul>
      </li>
      <li><a href="#26-discussions">2.6. Discussions</a></li>
      <li><a href="#27-conclusion">2.7. Conclusion</a></li>
    </ul>
  </li>
  <li><a href="#3-semantic-facets">3. Semantic Facets</a>
    <ul>
      <li><a href="#31-abstract">3.1. Abstract</a></li>
      <li><a href="#32-introduction">3.2. Introduction</a></li>
      <li><a href="#33-related-works">3.3. Related Works</a>
        <ul>
          <li><a href="#331-automated-response-evaluation">3.3.1. Automated response evaluation</a></li>
          <li><a href="#332-semantic-similarity-measurement">3.3.2. Semantic similarity measurement</a></li>
        </ul>
      </li>
      <li><a href="#34-patterns-and-indicative-powers-of-facets-matching-states">3.4. Patterns and indicative powers of facets matching states</a>
        <ul>
          <li><a href="#341-materials-and-methods">3.4.1. Materials and methods</a>
            <ul>
              <li><a href="#3411-dataset">3.4.1.1. Dataset</a></li>
              <li><a href="#3412-summary-of-facet-matching-states">3.4.1.2. Summary of facet matching states</a></li>
              <li><a href="#3413-answer-quality-prediction-with-facet-matching-states">3.4.1.3. Answer quality prediction with facet matching states</a></li>
            </ul>
          </li>
          <li><a href="#342-results-and-analysis">3.4.2. Results and analysis</a>
            <ul>
              <li><a href="#3421-facet-matching-pattern">3.4.2.1. Facet matching pattern</a></li>
              <li><a href="#3422-answer-evaluation-leveraging-facet-matching-states">3.4.2.2. Answer evaluation leveraging facet matching states</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#35-automatic-extraction-of-facets-matching-features-for-better-prediciton">3.5. Automatic Extraction of Facets Matching Features For Better Prediciton</a>
        <ul>
          <li><a href="#351-materials-and-methods">3.5.1. Materials and methods</a>
            <ul>
              <li><a href="#3511-dataset">3.5.1.1. Dataset</a></li>
              <li><a href="#3512-automatic-semantic-facet-extraction">3.5.1.2. Automatic semantic facet extraction</a></li>
              <li><a href="#3513-facet-matching-features">3.5.1.3. Facet matching features</a></li>
              <li><a href="#3514-semantic-closeness-features">3.5.1.4. Semantic closeness features</a></li>
            </ul>
          </li>
          <li><a href="#352-results-and-analysis">3.5.2. Results and analysis</a></li>
        </ul>
      </li>
      <li><a href="#36-discussion">3.6. Discussion</a></li>
      <li><a href="#37-conclusion">3.7. Conclusion</a></li>
      <li><a href="#38-小结">3.8. 小结</a></li>
    </ul>
  </li>
  <li><a href="#4-todo">4. TODO</a></li>
</ul>

<!-- /TOC -->

<h1 id="1-论文简介">1. 论文简介</h1>
<ul>
  <li><a href="https://ieeexplore.ieee.org/abstract/document/9779091" target="_blank">short answer grading model</a></li>
  <li><a href="https://ieeexplore.ieee.org/abstract/document/9860098" target="_blank">semantic facets</a></li>
</ul>

<p>这是两篇关于short-answer assessment的论文，所谓short-answer assessment就是对简答题的答案进行评估(和参考答案对比)，第一篇提出了利用BERT解决这个问题，第二篇提出了改进了评估过程，用多个semantic facets来评估short-answer，这篇博客记录一下对这两篇论文的精读</p>

<h1 id="2-bert-based-deep-neural-networks">2. BERT-Based Deep Neural Networks</h1>
<h2 id="21-abstract">2.1. Abstract</h2>
<p>Automatic short-answer grading(ASAG)，即自动短文本评分任务，是智慧辅导系统的重要组成部分。ASAG目前还存在很多挑战，作者提出了两个主要原因: 1)高精度评分任务需要对answer text有很深的语义理解; 2)ASAG任务的语料一般都很小，不能为深度学习提供足够的训练数据。为了解决这些挑战，作者提出用BERT-based网络来解决ASAG任务的挑战: 1)用预训练模型BERT来encoder答案文本就可以克服语料太小的问题。2)为了生成足够强的语义理解，作者在BERT输出层后加上了一个精炼层(由LSTM和Capsule网络串联组成) 3)作者提出一种triple-hot loss来处理ASAG的回归问题。实验结果表明模型的效果在SemEval-2013和Mohler数据集上表现比SOTA要好。模型在github上<a href="https://github.com/wuhan-1222/ASAG" target="_blank">开源</a></p>

<h2 id="22-introduction">2.2. Introduction</h2>
<p>考试和评估是智慧辅导系统(intelligent tutoring systems, ITSs)的重要组成部分，可以获得学生们的实时知识认知水平，也能为学生们提供个性化的学习方案。多选题是考试的重要组成部分，但是多选题有两个明显的短板: 1)多选题只提供部分选择 2)有些学生的答案可能是蒙出来的。ASAG可以解决上述问题，学生们为简答题提供一个short text，然后ASAG来评估short text是否正确，具体来说评估结果有五类: Correct、Partically correct、Contradictory、Irrelevant、Nondomain。</p>

<p>以往的研究中，Feature engineering是ASAG的主要解决方法，有很多稀疏特征应用于ASAG: token overlap features、syntax and dependency features、knowledge-based features(WordNet)… 但是这种特征工程为基础的方法存在以下问题: 首先，稀疏特征一般需要很多预处理步骤，这些步骤会产生一定的误差，可能会涉及到误差累积和误差传递的后果。此外，缺乏有效地encode文本句的手段</p>

<p>随着deeplearning的发展，出现了很多deep net，比如LSTM-based model、CNN and LSTM-based model、transformer-based model出现在了ASAG任务中。这些模型都从answer text中挖掘语义信息，然后将answer text转化成word enbedding，所以这些方法都是end-to-end的。但是这些方法存在以下问题: 1)学生的答案非常free，也就是说在句子结构、语言风格、段落长度这些方面可能会有很大的区别，所以作者认为需要用更先进的technique去获得text的语义理解。2)由于数据很难标注，所以ASAG任务的数据集语料很小，可能只有few thousand。所以说主要的挑战就是如何在小语料库上训练一个稳定高效的模型</p>

<p>论文的主要贡献:</p>
<ol>
  <li>提出了用预训练模型BERT微调，然后连接一个精炼层的模型表现超过SOTA(在SemEval-2013数据集和Mohler数据集上)</li>
  <li>精炼层由Bi-LSTM和Capsule network(with position information)串联组成，LSTM来抽取全局的context信息，Capsule来抽取局部context信息</li>
  <li>用多头注意力层来连接全局和局部context来生成语义表示</li>
  <li>提出了triple-hot loss策略</li>
</ol>

<h2 id="23-related-work">2.3. Related Work</h2>
<h3 id="231-applications-of-deep-learning-in-asag-tasks">2.3.1. Applications of Deep Learning in ASAG Tasks</h3>
<p>根据deep learning和训练策略的不同，作者将deeplearning在ASAG的应用分为以下三种:</p>
<ol>
  <li>Participator: deep learning参与feature-based方法中</li>
  <li>Contractor: deeplearning独立地在ASAG任务中实现end-to-end</li>
  <li>迁移学习，经典的预训练模型+scaling语料库</li>
</ol>

<p>接下来分别介绍了利用稀疏特征的方法与Deeplearning来来解决ASAG任务:</p>
<ol>
  <li>稀疏特征，也即feature engineering的应用有:
    <ul>
      <li>Marvaniya等人和Saha等人使用预训练的神经网络InferSent对答案文本进行编码，这弥补了标记重叠(token overlap)方法中上下文表示的不足，其中InferSent是使用Bi-LSTM网络的预训练句子嵌入模型</li>
      <li>Tan等人提出了一种将图卷积网络(GCNs)与几种稀疏特征相结合的评分方法。他们首先为答案文本构建了一个无向异构文本图，其中包含句子级节点、单词/bigam级节点和节点之间的边。然后，他们使用两层GCN模型对图结构进行编码，得到图的表示形式。</li>
      <li>Zhang等人使用深度信念网络作为分类器，而不是传统的机器学习，对学生由六个稀疏特征组成的答案表示进行分类</li>
    </ul>
  </li>
  <li>Deeplearning的方法有:
    <ul>
      <li>Kumar等人提出了ASAG的Bi-LSTM框架。他们的框架由三个级联的神经模块组成:分别应用于参考和学生答案的Siamese Bi-LSTMs，使用earth-mover distance(EMD)与LSTMs的隐状态交互的池化层，以及用于输出分数的回归层</li>
      <li>Uto和Uchida将LSTM网络与项目反应理论(item response theory)相结合进行短文本答案评分</li>
      <li>Tulu等人改进了基于LSTM的评分方法，通过引入感觉向量并将池化层替换为曼哈顿距离</li>
      <li>Riordan等人结合CNN和LSTM网络进行短文本答案评分</li>
      <li>Liu等人在一个大型K-12数据集上提出了一个具有多路注意的模型</li>
    </ul>
  </li>
</ol>

<p>上面提到的deeplearning方法需要大语料库支撑的数据集，但是ASAG缺少足够的大语料库，于是出现了用预训练模型来解决ASAG任务，比如ELMo、BERT、GPT、GPT-2，在这些模型中，BERT表现最好</p>

<h3 id="232-bert-model-and-its-application-in-education">2.3.2. BERT Model and Its Application in Education</h3>
<p>BERT吸收了ELMo和GPT的优点，模型如下图所示:</p>
<center><img src="../assets/img/posts/20221010/2.jpg" /></center>
<p>BERTstack了12个transformer块</p>

<p>接下来介绍了BERT在智慧教育领域的应用:</p>
<ol>
  <li>Wang等人提出了分层课程BERT模型，以更好地捕捉每门课程的课程结构质量和语言特征，预测在线教育中教师的绩效</li>
  <li>Khodeir等人将BERT与多层双向GRU相结合，构建了一个紧急分类模型，用于教师快速挑选和响应大规模开放在线课程(MOOC)论坛中最紧急的学生帖子，该模型在三个Stanford MOOC Post数据集上实现了紧急帖子分类，加权F-score分别为91.9%、91.0%和90.0%</li>
  <li>Sung等人利用BERT构建了一个多标签分类模型，用于快速评估学生在探索热力学的过程中的多模态的表征思维</li>
</ol>

<p>关于ASAG的应用有:</p>
<ol>
  <li>Sung等人分析比较了BERT与多种网络结构在short-answer grading的效果</li>
  <li>Leon等人分析比较了BERT、ALBERT、RoBERTa在short-answer grading的效果</li>
</ol>

<h2 id="24-methodology">2.4. Methodology</h2>
<h3 id="241-task-definition">2.4.1. Task Definition</h3>
<p>ASAG问题有两种形式:</p>
<ol>
  <li>回归问题: 连续的分数来评估学生的答案</li>
  <li>分类问题: 将学生的答案分为五类: Correct、Partically correct、Contradictory、Irrelevant、Nondomain</li>
</ol>

<p>作者的做法是用分数来对类别进行分类，比如0-0.5属于类别1，所以问题的本质还是分类问题，那么ASAG的预测类别$y^*$可以表示为:</p>

<p>
\begin{equation}
y^*=\underset{y \in Y}{\operatorname{argmax}}(\operatorname{Pr}(y \mid(q, p)))
\end{equation}
</p>

<p>其中Y表示类别集，Pr()表示预测的概率分布，q是学生答案，p是参考答案</p>

<h3 id="242-model">2.4.2. Model</h3>
<p>作者解释为什么即要用BERT，也要用refinement:</p>
<ol>
  <li>BERT获得word embedding结果，利用了所有词元之间的关系，但是没有考虑顺序和距离，所以需要用Bi-LSTM来生成更精细的全局context，同时弥补BERT时序信息的缺失，然后利用Capsule或者CNN来生成BERT每个隐层的局部信息</li>
  <li>BERT可以获得动态的词嵌入(对比GloVe获得静态的词嵌入)，这样可以获得更丰富的general-purpose knowledge，所以BERT即使在小语料库上也能有不错的效果</li>
  <li>一些研究表明，在BERT上应用经典的神经网络可以在小数据集上获得更好的效果，比如Liao等人结合RoBERTa和CNN来提升情感分析的效果，Yang等人在BERT上应用多头注意力层来添加距离权重在aspect polarity classification上获得更好的效果</li>
</ol>

<p>主题网络模型如下图所示:</p>
<center><img src="../assets/img/posts/20221010/4.jpg" /></center>
<p>接下来从模型的各个板块来分别介绍:</p>

<h4 id="2421-bert-layer">2.4.2.1. BERT layer</h4>
<p>首先BERT layer的参数初始化成BERTbase的参数，微调。BERT layer层的输入是学生和参考答案的token embedding，输出是BERT的隐层</p>

<p>
\begin{equation}
O_{BERT}=BERT(s)=\left\{h_1^b,h_2^b,...,h_n^b\right\}\in \mathbb{R}^{n\times d_b}
\end{equation}
</p>

<h4 id="2422-semantic-refinement-layer">2.4.2.2. Semantic Refinement Layer</h4>
<p>Refinement层由Bi-LSTM和Capsule network(with position information)串联组成，输出结果如下所示:</p>

<p>
\begin{equation}
\begin{aligned}
&amp;\overrightarrow{O_{\mathrm{LSTNS}}}=\overrightarrow{\operatorname{LSTMS}}\left(O_{\text {BERT }}\right)=\left\{\overrightarrow{h_1^L}, \overrightarrow{h_2^L}, \ldots, \overrightarrow{h_n^L}\right\} \in \mathbb{R}^{n \times d_L} \\
&amp;\overleftrightarrow{O_{\mathrm{LSTMs}}}=\overleftarrow{\operatorname{LSTMs}}\left(O_{\mathrm{BERT}}\right)=\left\{\overleftrightarrow{h_1^r}, \overleftrightarrow{h_2^r}, \ldots, \overleftrightarrow{h_n^r}\right\} \in \mathbb{R}^{n \times d_L} \\
&amp;O_{\mathrm{Caps}}=\operatorname{Capsules}\left(O_{\text {BERT }}\right)=\left\{h_1^c, h_2^c, \ldots, h_n^c\right\} \in \mathbb{R}^{n \times d_c}
\end{aligned}
\end{equation}
</p>

<p>输出结果后面都跟了一个层归一化(保证数据分布的稳定，加速收敛)</p>

<p>这里提到了Capsule network，我对Capsule network进行一定的补充: Capsule网络主要想解决卷积神经网络（Convolutional Neural Networks）存在的一些缺陷，比如说信息丢失，视角变化等。Capsule网络结构如下图所示:</p>
<center><img src="../assets/img/posts/20221010/7.jpg" /></center>
<p>以数字图片分类为例，Capsule一共包含3层，2层卷积层和1层全连接层。与普通网络的区别是输出的每个类别都是一个向量，向量的长度表示实体存在的概率大小，向量在空间中的方向表示实体的实例化参数，Capsule网络和CNN还是比较相似的</p>

<h4 id="2423-semantic-fusion-layer">2.4.2.3. Semantic Fusion Layer</h4>
<p>在refinement层后，需要有一个融合层来融合LSTM和Capsule的结果，先用矩阵来stackLSTM、Capsule的结果:</p>

<p>
\begin{equation}
X^{(e)}=\{x_1^{(e)}, x_2^{(e)},...,x_n^{(e)}\}\in \mathbb{R}^{n\times d}
\end{equation}
</p>

<p>其中$x_i^{(e)}=[h_i^L;h_i^r;h_i^c]$，然后再把矩阵X送入多头自注意力层，注意力评分函数是scaled dot-product attention，具体细节如下:</p>

<p>
\begin{equation}
\begin{aligned}
&amp; \text{MultiHead}(Q,K,V)=[\text{head}_1;\text{head}_2;...;\text{head}_h]\omega^R \\
&amp; \text{head}_i=\text{Attention}(Q_i;K_i;V_i)=\text{Attention}(Q\omega ^Q, K\omega ^K, V\omega ^V) \\
&amp; \text{Attention}(Q_i;K_i;V_i)=\text{softmax}(\frac{Q_iK_i^T}{\sqrt{d_K}})V_i \\
 X^{(h)}&amp;=\text{MultiHead}(X^{(e)}, X^{(e)}, X^{(e)}) \\
&amp;=\{x_1^{(h)}, x_2^{(h)},..., x_n^{(h)}\}
\end{aligned}
\end{equation}
</p>

<p>为了让全局context和局部context不互相干扰，作者对多头自注意力层做以下约束:</p>
<ol>
  <li>让LSTM的输出维度和Capsule的输出维度相同，即$d_c=2d_L$</li>
  <li>head数取2</li>
  <li>让局部context和全局context不互相干扰(用参数调整)，如下图所示:</li>
</ol>
<center><img src="../assets/img/posts/20221010/10.jpg" /></center>
<p>最后再连接一个层归一化</p>

<h4 id="2424-prediction-layer">2.4.2.4. Prediction Layer</h4>
<p>预测层，首先用最大池化层获得pair(q,p)的语义表示，其实就是在每个头上选择最大的值:</p>

<p>
\begin{equation}
\begin{aligned}
Z &amp;=\text{Maxpooling}(X^{(h)})={z_1,z_2,...,z_d}\in \mathbb{R}^d \\
z_j &amp;=\text{Max}(x_{1j}^{(h)}, x_{2j}^{(h)},..., x_{nj}^{(h)}), j=1,2,...,d
\end{aligned}
\end{equation}
</p>

<p>然后将语义表示Z输入线性层(加上一个dropout防止overfit)，然后用softmax表示输出的概率分布:</p>

<p>
\begin{equation}
\begin{aligned}
o &amp;=MZ+b \\
p(y\mid Z)&amp;=\frac{exp(o_y)}{\sum_{i}^{d_y}exp(o_i)}
\end{aligned}
\end{equation}
</p>

<h4 id="2425-loss-function">2.4.2.5. Loss Function</h4>
<p>为了适应两种ASAG tasks，作者提出了两种损失函数的策略:</p>
<ul>
  <li>第一种就是常规的交叉熵，分类结果用one-hot编码</li>
</ul>

<p>
\begin{equation}
L(\theta)=-\sum_{i=1}^{|\Omega|}\log \left(p\left(y_i \mid Z_i, \theta\right)\right)
\end{equation}
</p>

<ul>
  <li>第二种就是作者提出用triple-hot编码y，就是在y对应位置的左右也置1，那么损失函数为:</li>
</ul>

<p>
\begin{equation}
\begin{aligned}
L(\theta)=&amp;-\sum_{i=1}^{|\Omega|}\left(\log \left(p\left(y_i^{-1} \mid Z_i, \theta\right)\right)+\log \left(p\left(y_i \mid Z_i, \theta\right)\right)\right.\\
&amp;\left.+\log \left(p\left(y_i^{+1} \mid Z_i, \theta\right)\right)\right)
\end{aligned}
\end{equation}
</p>

<h2 id="25-experiments">2.5. Experiments</h2>
<h3 id="251-datasets">2.5.1. Datasets</h3>
<p>作者在两个ASAG主流数据集上进行评估，分别是SemEval-2013和Mohler数据集</p>
<center><img src="../assets/img/posts/20221010/16.jpg" /></center>

<ol>
  <li>SemEval-2013: 作者使用SemEval-2013中的SciEntsBank语料，SciEntsBank语料包含15个不同科学领域的197个问题和10000个答案，这个语料库是ASAG分类任务的一个benchmark，他包含三种分类类别，分别是two-way(Correct and Incorrect)，three-way (Correct, Contradictory, and Incorrect)，five-way (Correct, Partially correct, Contradictory, Irrelevant, and Non-domain)，为了提供多方面的evaluation，测试数据集分为了三个子集:
    <ul>
      <li>Unseen Answers(UA): 和训练集有相同的题目和参考答案，但是学生的回答不同</li>
      <li>Unseen Questions(UQ): 和训练集的问题不同，但是属于同一个领域</li>
      <li>Unseen Domains(UD): 和训练集的问题不同，且不属于同一个领域</li>
      <li>对于这个数据集，作者用三个性能度量(accuracy, weighted-F1, macro-average F1)来评估两个子任务(three-way, five-way)</li>
    </ul>
  </li>
  <li>Mohler dataset: 数据集<a href="http://web.eecs.umich.edu/?mihalcea/downloads/ ShortAnswerGrading_v2.0.zip" target="_blank">开源</a>。数据集由Mohler团队从University of North Texas的一门计算机科学课程的两个考试和十个测试收集整理。它包含80个问题和2273个学生的答案，每个答案都由两名老师打分(0-5, integer)，由于是平均而来，所以一共由11种分类结果，Mohler数据集同样是ASAG任务的一个benchmark，作者可以将数据集变成了11个类别的分类数据集。</li>
</ol>

<p>由于数据集只有2273个答案对，太小，所以需要对数据集进行扩充，Kumar等人通过把训练集中正确的学生答案作为额外的参考答案，这样就把数据集的答案-问题对扩充到30000对。作者为了避免过拟合，采取了折中的策略，对每个问题只挑选一个学生的正确答案作为额外的参考答案，这样就把2083个答案对扩充至3300个答案对。针对Mohler数据集，作者采用了12折交叉验证的方法，用来评估的性能度量有Cohen’s kappa coefficient(kappa), Pearson correlation coefficient(Pearson’s r), mean absolute error(MAE), root-mean-square error(RMSE)，Mohler的标签只有11类，作者既可以把它当作了回归任务来评估(就是把分类结果用分数表示)，也可以把它当作分类任务来评估，其中kappa系数是分类任务的性能度量，其他的性能度量都是回归任务的性能度量</p>

<h3 id="252-experimental-settings">2.5.2. Experimental Settings</h3>
<p>BERT采用base版本(12层，768个单元，12个head，110M参数)，LSTM的隐层个数设置为200并且在最后一个时间步返回所有的hidden state，Capsule的卷积核个数设置为400，卷积核大小为3，dynamic route设置为3。在融合层，attention head设置为2，每个头400维参数，dropout参数都设置为0.1，使用adam优化器，学习率设置为2e-5，一个小批量64个输入，训练周期为10</p>

<h3 id="253-ablation-studies">2.5.3. Ablation Studies</h3>
<p>为了分析每一层的作用，从六个角度来做ablation studies:</p>
<ol>
  <li>W/O refinement: 无refienment</li>
  <li>W/O multihead: 无multihead</li>
</ol>

<p>以此类推，得到如下结果:</p>
<center><img src="../assets/img/posts/20221010/17.jpg" /></center>

<h3 id="254-comparison-with-baseline-systems">2.5.4. Comparison With Baseline Systems</h3>
<p>与众多模型进行对比，主要的实验结果如下:</p>
<ul>
  <li>Mohler数据集</li>
</ul>
<center><img src="../assets/img/posts/20221010/18.jpg" /></center>

<ul>
  <li>SemEval-2013:</li>
</ul>
<center><img src="../assets/img/posts/20221010/19.jpg" /></center>

<ul>
  <li>PR曲线:</li>
</ul>
<center><img src="../assets/img/posts/20221010/20.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20221010/21.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20221010/22.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20221010/23.jpg" /></center>

<ul>
  <li>AUC值和PR曲线平衡点:</li>
</ul>
<center><img src="../assets/img/posts/20221010/24.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20221010/25.jpg" /></center>

<h2 id="26-discussions">2.6. Discussions</h2>
<p>从Ablation实验结果可以看出，refinement层提升了模型的在Sem-UQ和Mohler数据集上的精度，说明refinement层提高了BERT模型在相同问题领域的泛化性，同时也可以看出LSTM在refinement层也很重要，可以提取更丰富的全局context信息。Capsule的有无也说明了它可以提取局部context信息，同时发现它的效果比一般的CNN要好。Triple-loss的设计也确实提升了模型的性能</p>

<p>接着简单分析了一下表4(Mohler数据集)与表5(SemEval-2013)的结果，其实就是对比了不同模型的性能度量，说哪个模型更好什么的</p>

<p>然后分析PR曲线的结果，作者认为在大多数情况下，模型的PR曲线远高于其他模型的PR曲线，这与表6中模型在所有图中AUC最大的结论是一致的。除此之外，平衡点的值也更高，说明模型性能最好</p>

<p>模型可以应用于智慧教育系统的两个场景:</p>
<ol>
  <li>ITSs领域，即智慧辅导系统，可以让评估变成自动化的</li>
  <li>MOOC线上平台，可以替代老师的手动评估，快速精准地为大量的free-text answer进行评分</li>
</ol>

<h2 id="27-conclusion">2.7. Conclusion</h2>
<p>作者提出了一种新的BERT-based网络结构来解决ASAG问题，进行了大量的实验，得出了一下的结论:</p>
<ol>
  <li>基于词嵌入的网络，如CNN、LSTM、Capsule无法在小数据集上取得很好的结果</li>
  <li>预训练网络BERT可以很好的适配ASAG任务</li>
  <li>利用LSTM和Capsule网络可以进一步挖掘语义信息</li>
</ol>

<p>模型局限性:</p>
<ol>
  <li>在开放领域的问答中，小数据集训练出来的模型无法取得预期的效果，比如Sem-UD</li>
  <li>目前来说，模型无法消除或者替代学生答案中的大量的代词，作者计划在后续通过BERT模型来消除学生答案中的代词来提升模型的性能</li>
</ol>

<h1 id="3-semantic-facets">3. Semantic Facets</h1>
<p>论文全称为Leveraging Semantic Facets for Automatic Assessment of Short Free Text Answers，接下来将逐段阅读并整理论文</p>

<h2 id="31-abstract">3.1. Abstract</h2>
<p>短文本问答能反映出学生对于知识的掌握情况，由于自然语言的复杂性，简答题的自动评估任务仍具有挑战性。现有的自动评估模型的做法是预测答案的分数来评估学生的答案，他们一般不关心参考答案的语义面，这限制了预测的表现。该篇论文的关注点是短文本答案的不同的语义面(semantic facets)，每个语义面对应着需要掌握的知识。利用带有语义面标注的数据集，作者首先展示了语义面状态与答案质量(一个答案的好坏)的对应关系，然后展示了语义面在自动评估答案质量的重要性。作者接着将工作拓展到不包含语义面的数据集上，证明了作者的工作在自动评估短文本答案方面的有效性，这些工作包括语义面提取、预测语义面状态和使用语义面的特征工程。</p>

<p>论文的贡献有:</p>
<ol>
  <li>论文提出的方法提升了短文本答案评估的SOTA的表现</li>
  <li>论文深入研究短文本答案的语义面组成，让短文本评估模型的可解释性更高</li>
</ol>

<h2 id="32-introduction">3.2. Introduction</h2>
<p>评估学生的答案非常重要，在网上学习中，实现手动评估非常困难，加速了关于自动评估的研究。研究着重于学生的短文本答案，与多选题相比，答案更不被定义且不具备结构化，所以自动评估很困难。此外，为了正确回答问题，一个短文本的回答可能传达了学生对知识的更深层次的思考，并且可能包含多个从属的知识。有了语义面之后，一个更详细的评估方法出现了，可以分析学生答案的不同语义部分，而不是简单的给出答案的分数。</p>

<p>最近的研究基本上都采取了黑盒的模式(black box)，即从一端输入学生的答案和参考答案，另一端直接输出答案的分数，这中间发生了什么我们并不知道。虽然说对于评估系统来说，分数很重要，但是参考答案涉及到的多个知识点与学生答案的匹配情况我们却一概不知。为了提升评估任务的表现，作者将关注点从黑盒转移到分解评估的过程。为了简便，作者将参考答案的知识组成称为语义面(Semantic Facets)，给定一段文本，这段本文的语义面是由文本的短语组成的集合</p>

<p>论文的主要实验和工作有两个，分别在SciEntsBank数据集和Beetle数据集上展开</p>
<ol>
  <li>第一个工作数据集是SciEntsBank，每个问题的语义面都标注好了，学生答案与问题的语义面匹配状态(matching state)也给出了，这样我们就可以得到不同评分等级(correct, incorrect…)的答案的语义面匹配状态的分布情况。有了分布情况后，我们便可以回答以下问题: 1)是否能根据学生答案的语义面匹配状态来确定答案的评分? 2)分布情况对自动评估系统是否有帮助? 除此之外，我们还可以构建模型来通过学生的答案和语义面来预测语义面的匹配状态</li>
  <li>为了泛化第一个工作，第二个工作使用的数据集是Bettle数据集，这个数据集既没有语义面的标注，也没有语义面的匹配状态的标注。作者首先提出了一种从参考答案提取语义面的方法: 利用词汇统计(lexical statistics)和语法信息(syntax information)。接着利用第一个工作中训练好的预测语义面的匹配状态的网络来预测这个数据集的语义面匹配状态，然后再利用工作一中发现的pattern来通过学生答案的语义面匹配状态来获取features(后续用于对答案进行评分，所以这一步就是feature engineering)，最后，利用这些feature来预测答案的评分</li>
</ol>

<p>贡献:</p>
<ol>
  <li>部分程度上打开了自动评估模型的black box</li>
  <li>发现了matching state与不同评分等级的对应关系，即发现了pattern，这对于自动和手动评估都有帮助</li>
  <li>提出了一种从参考答案抽取语义面的方法</li>
</ol>

<h2 id="33-related-works">3.3. Related Works</h2>
<p>该小节介绍了论文的两个相关工作: 1)自动评估系统的不同任务及对应方法 2)量化一对文本的语义相似度的方法</p>

<h3 id="331-automated-response-evaluation">3.3.1. Automated response evaluation</h3>
<p>根据自动评估系统目标的不同进行分类:</p>
<ol>
  <li>为了评估学习者的语言使用能力，许多评估系统从语言和语法使用、内容组织等方面评估写作质量，这样的系统有ETS(educational testing services)、E-Rator 、Coh-metrics、AcaWriter</li>
  <li>评估学生答案时要求学生的答案涵盖特定的知识，只有涵盖了最关键的部分，学生才能获得满分。为了这个目标，许多系统训练了一个预测模型，有运用词重叠(word overlapping)，语义和语法相似等特征的模型，也有预训练模型来做embedding的模型</li>
</ol>

<p>论文工作属于第二类</p>

<h3 id="332-semantic-similarity-measurement">3.3.2. Semantic similarity measurement</h3>
<p>量化两段文本的相似度是自然语言处理的基本步骤，短文本自动评估系统通过文段相似度的测量来量化学生答案和参考答案的相似度。测量方法有term matching(术语匹配)技术和涉及外部知识的语义计算(semantic computation)</p>
<ol>
  <li>term matching技术基于真实文本和预测文本的公共单词，基于term matching的方法有BLUE和Rouge。</li>
  <li>term matching有个明显的短板就是无法处理近义词或者同义词，可以用WordNet来解决。除此之外，一个单词或者短语的意思可以被分解成量化的语义块，这样测量起来才是数字化的(非二进制)，这样的方法有LSA(Latent Semantic Analysis)、Word2vec、GloVe。但即使是Word2vec也无法解决一词多义的问题，所以诞生了单词的动态语义嵌入(即考虑了context)，这样的模型有RNN-based ELMo、Bert等等</li>
</ol>

<h2 id="34-patterns-and-indicative-powers-of-facets-matching-states">3.4. Patterns and indicative powers of facets matching states</h2>
<p>也就是intro里提到的第一个工作，着眼于发现state和response type的pattern，然后利用这个pattern来做预测(通过答案的语义面匹配状态来预测答案的评分)</p>

<h3 id="341-materials-and-methods">3.4.1. Materials and methods</h3>
<h4 id="3411-dataset">3.4.1.1. Dataset</h4>
<p>数据集使用的是SciEntsBank，数据集大约有10000个学生答案和197个问题，学生答案分为五类(5-ways，见表格1)，训练集和测试集分别有4969和5835个样本，同样地，根据问题的不同分为: UA, UQ, UD。数据集中每一个问题都包含语义面的标注，正确的学生答案应该cover这些语义面，数据集中同样包含语义面匹配状态的标注，语义面的状态一共有八种，见表格2</p>

<center><img src="../assets/img/posts/20221010/26.jpg" /></center>
<p><br /></p>
<center><img src="../assets/img/posts/20221010/27.jpg" /></center>

<p>为了更直观地了解样本和语义面及语义面匹配状态，这里举了一个例子:</p>

<center><img src="../assets/img/posts/20221010/28.jpg" /></center>
<center><img src="../assets/img/posts/20221010/29.jpg" /></center>

<p>这个例子的语义面及两个学生答案对应的语义面匹配状态见表格3:</p>

<center><img src="../assets/img/posts/20221010/30.jpg" /></center>

<p>通过表格3我们可以发现语义面关注相关对象的特定属性或状态，这里可以发现相对正确的答案A基本上与所有的语义面都匹配，但是相对不正确的答案B与某些语义面冲突</p>

<h4 id="3412-summary-of-facet-matching-states">3.4.1.2. Summary of facet matching states</h4>
<p>每个语义面只有一个语义面匹配状态，不同问题的语义面数量不同，可以用语义面匹配状态的分布情况来总结一个问题的总体的语义面匹配状态，这样我们就可以比较不同评分等级的答案的匹配状态，比如我们可以比较答案A和B的分布，见表格4:</p>

<center><img src="../assets/img/posts/20221010/31.jpg" /></center>

<h4 id="3413-answer-quality-prediction-with-facet-matching-states">3.4.1.3. Answer quality prediction with facet matching states</h4>
<p>不同答案的语义面匹配状态的分布不同，可以将八种匹配状态的分布权重视为feature，答案的类型作为label，那么就可以进行分类。作者采用Gradient Boosting Tree(GBT)来当作预测模型。这样就可以通过答案的匹配状态分布来预测答案的评分</p>

<h3 id="342-results-and-analysis">3.4.2. Results and analysis</h3>
<h4 id="3421-facet-matching-pattern">3.4.2.1. Facet matching pattern</h4>
<p>数据集总体的语义面匹配状态分布见表格5，利用卡方检测，可以发现答案的类型与语义面匹配状态的权重(即分布)有关</p>

<center><img src="../assets/img/posts/20221010/32.jpg" /></center>

<p>归一化每个匹配状态的权重，得到下图的分布，可以发现不同答案类型的匹配状态分布不同:</p>

<center><img src="../assets/img/posts/20221010/33.jpg" /></center>

<p>观察发现，Correct的答案基本上express语义面，non domain的答案基本上unaddress语义面，不同类型答案的匹配状态分布情况就是一个pattern，用来连接一个答案的匹配状态和类型</p>

<h4 id="3422-answer-evaluation-leveraging-facet-matching-states">3.4.2.2. Answer evaluation leveraging facet matching states</h4>
<p>接下来评估以下GBT模型(通过匹配状态来预测类型)的表现情况，结果见表格6，性能度量是Macro F1</p>

<center><img src="../assets/img/posts/20221010/34.jpg" /></center>

<p>通过表格6可以发现，这个分类任务是具有挑战性的，基本上所有的模型都取得了相对较低的F1值，比较不同模型发现，GBT取得了最好的结果。总的来说，现实任务中不太可能会知道一个问题的语义面或者语义面匹配状态，所以作者将工作拓展到更一般的情况，也就是3.5节将介绍的内容</p>

<h2 id="35-automatic-extraction-of-facets-matching-features-for-better-prediciton">3.5. Automatic Extraction of Facets Matching Features For Better Prediciton</h2>
<p>对于语义面和语义面匹配状态都没有的情况下，作者提出了抽取语义面和预测语义面匹配状态的方法，然后利用特征抽取的方法挖掘出语义面匹配状态分布与pattern的关系，再结合语义相似性来预测答案的类型，这种方法大大提高了预测的表现</p>

<h3 id="351-materials-and-methods">3.5.1. Materials and methods</h3>
<h4 id="3511-dataset">3.5.1.1. Dataset</h4>
<p>数据集使用的是Beetle数据集，56个问题，5000个学生答案，标签有5-way和3-way，训练集和测试集分别有3941和1258个样本，测试集分为UA, UQ</p>

<h4 id="3512-automatic-semantic-facet-extraction">3.5.1.2. Automatic semantic facet extraction</h4>
<p>Beetle数据集的参考答案不包含语义面，但是一个问题会有多个参考答案，他们之间有细微的差别，一个例子:</p>

<p>问题是: Why does measuring voltage help you locate a burned out bulb?</p>

<p>参考答案:</p>
<ul>
  <li>Measuring voltage indicates the place where the electrical state changes due to a damaged bulb</li>
  <li>Measuring voltage indicates the place where theelectrical state changes due to a gap</li>
  <li>Measuring voltage indicates whether two terminals are connected to each other</li>
  <li>Measuring voltage indicates whether two terminals are separated by a gap</li>
</ul>

<p>接下来将介绍作者如何从参考答案集中抽取出语义面:</p>
<ol>
  <li>关键词提取: 从问题和参考答案中抽取出现次数超过两次的词，这些词就是关键词(pivotal word)</li>
  <li>基于语法的expression提取: 从参考答案的语法树(dependency parsing tree)中获取与语法相关的术语来形成更完整的expression，下面这张图展示了例子中四个参考答案的语法树:</li>
</ol>

<center><img src="../assets/img/posts/20221010/35.jpg" /></center>

<p>语法树建立句子中单词的语法关系，从中心词往外伸展，一个句子的中心词就是它的谓语。有两种生成语义面的方法，第一种就是连接关键词和树上与它相邻的词，比如voltage和measuring构成了一个语义面measuring voltage。第二种方法是针对一对关键词，找到它们的最小公共节点构成语义面，比如terminals和gap的最小公共节点是separated，那么它们可以构成语义面terminals separated gap。第一种方法的出发点是一个关键词可能是一个expression的一部分，第二种方法的出发点是两个关键词可以覆盖较大的语义区域，再结合它们的公共节点，便可包含多个语义面，成为一个新的语义面。</p>

<p>通过这两种方法可能会生成意义不明的语义面，但是这也是后续算法需要考虑的部分，增强了算法的泛化性</p>

<h4 id="3513-facet-matching-features">3.5.1.3. Facet matching features</h4>
<p>有了学生答案的语义面后，接下来就需要实现语义面匹配状态的预测。为了实现预测模型，作者用带匹配状态标签的SciEntsBank数据集进行训练。模型的细节在Appendix A中具体展开。模型的结构如下图所示:</p>

<center><img src="../assets/img/posts/20221010/36.jpg" /></center>

<p>模型的左边代表学生答案的输入，模型的右边代表语义面的输入，它们的每个词元都经过Bi-LSTM(embedding选择的是Glove)，然后输出隐状态，然后用注意力机制获得$\tilde{h_i^F}$，查询是语义面的hidden state，K和V是答案的hidden state，注意力权重为:</p>

<p>
\begin{equation}
a_{i,j}=\frac{e^{(h_i^F)^T\cdot h_j^R}}{\sum_{j'=1}^{N_R}e^{(h_i^F)^T\cdot h_{j'}^R}}
\end{equation}
</p>

<p>为了获取facet更全面的信息，作者将$\tilde{h_i^F}$、$h_i^F-\tilde{h_i^F}$、$h_i^F\odot \tilde{h_i^F}$、$h_i^F$连结了起来:</p>

<p>
\begin{equation}
\mathbf{c}_i=\left[\tilde{\mathbf{h}}_i^F ; \mathbf{h}_i^F-\tilde{\mathbf{h}}_i^F ; \mathbf{h}_i^F \odot \tilde{\mathbf{h}}_i^F ; \mathbf{h}_i^F\right]
\end{equation}
</p>

<p>接着对C进行取平均和最大的操作，concat之后输入MLP作预测，MLP这里取了三层，神经元数量分别为64、32和8，激活函数用ReLU:</p>

<p>
\begin{equation}
\begin{aligned}
&amp;\mathbf{c}_{\max }=\max (\mathbf{C}) \\
&amp;\mathbf{c}_{\min }=\operatorname{avg}(\mathbf{C}) \\
&amp;\mathbf{c}_{\mathrm{agg}}=\left[\mathbf{c}_{\max } ; \mathbf{c}_{\mathrm{avg}}\right] \\
&amp;\hat{\mathbf{y}}=\operatorname{softmax}\left(\operatorname{MLP}\left(\mathbf{c}_{\mathrm{agg}}\right)\right)
\end{aligned}
\end{equation}
</p>

<p>模型定义完后，作者比较了三种GBT的效果，GBT-Gold代表GBT在标注好的匹配状态和语义面上训练，GBT-Predict表示GBT在预测的匹配状态和标注好的语义面上训练，GBT-Approx表示GBT在预测的匹配状态和语义面上训练，性能度量同样是Macro F1，数据集用的也是SciEntsBank:</p>

<center><img src="../assets/img/posts/20221010/37.jpg" /></center>

<p>从表格中可以看出，GBT-Predict效果和GBT-Gold的效果差不多，根据预测的语义面匹配状态，我们有:</p>
<ul>
  <li>Aggregated facet matching states: 一个学生答案的预测语义面有很多，预测的语义面匹配状态需要聚合在一起。作者提出了两种聚合方法: 第一种软的是平均了所有语义面的预测匹配状态的概率，第二种硬的做法是针对每个语义面，只保留概率最高的匹配状态，两种方法都可以获得匹配状态的分布</li>
  <li>Pattern matching: 将网络结构的输出aggregate之后，与五种类型的真实匹配状态分布对比后，了解该答案的预测匹配状态分布属于哪一种类型。具体的对比方法是选取KL散度最小的作为该答案的类型，KL散度能测量两个分布的差距，0代表两个分布相似度最高，假如预测的分布为$\tilde{p(x)}$，那么KL散度为:</li>
</ul>

<p>
\begin{equation}
D(p_k(x)\|\tilde{p(x)}=\sum_{x\in C}p_k(x)log\frac{p_k(x)}{\tilde{p(x)}})
\end{equation}
</p>

<ul>
  <li>Confidence of prediction: 除了pattern matching外，匹配状态的confidence level也包含了很多信息。通过aggregate获得语义面的匹配状态分布后，取每个语义面预测概率值最高的概率值作为该语义面的confidence level。那么我们可以计算出Noisy-OR score:</li>
</ul>

<p>
\begin{equation}
Noisy-OR=1-\prod_{i=1}^{N_F}(1-\tilde{p_i})
\end{equation}
</p>

<p>其中$N_F$是语义面的个数，$\tilde{p_i}$就是语义面i的confidence level。如果所有的预测概率都是1，那么Noisy-OR为1，如果所有的预测概率都是0，那么Noisy-OR为0。Noisy-OR衡量了模型中至少有一个预测是合适的可能性有多大。Noisy-OR同样可以对某一个语义面匹配状态进行计算，这样得到的特征更好配合后续的使用</p>

<h4 id="3514-semantic-closeness-features">3.5.1.4. Semantic closeness features</h4>
<p>除了3.5.1.3小节中提到的基于feature的分类方法，基于语义相似度的分类方法也适用。接下来会介绍一些计算参考答案和学生答案语义相似度的方法，如果有多个参考答案，取平均值即可:</p>
<ol>
  <li>Term Matching Features: 用这些指数来计算语义相似度: N-gram overlapping, Rouge, Rouge-1, Rouge-2, Rouge-l, BLUE</li>
  <li>Fixed and dynamic embedding features: Glove, LSA, BERT。对参考答案和学生答案编码后计算相似度</li>
  <li>Semanic entailment features: 使用预训练的text entailment model: Decomposable Attention Model。输入文本对后，模型预测这两段文本的关系，有entailment, contradict, neutral</li>
</ol>

<h3 id="352-results-and-analysis">3.5.2. Results and analysis</h3>
<p>为了评估3.5.1.3.和3.5.1.4.这两节提出的features，可以用GBT来测试。GBT可以看成随机森林，GBT在不同的特征上进行训练，表格7给出了不同特征上训练的结果:</p>

<center><img src="../assets/img/posts/20221010/38.jpg" /></center>

<p>GBT(Full)表示上面提到的所有feature都运用了，包括aggregated matching state、KL散度、Noisy-OR、语义相似度和语义推断(semantic entailment)。可以发现将所有的信息都运用后，GBT(Full)模型是表现最好的模型。然后作者希望了解facet feature是否真的有效，GBT(Facets)就是运用了Facets所有特征的模型，横向对比GBT(Sem.Sim)和GBT(Sem.Entail)，发现facet的表现最好，不止如此，将这些特征全部结合得到的效果会更好。最后对比以下facet三个特征: Nosiy-OR、KL散度、aggregated matching states。发现Noisy-OR的效果最好。</p>

<p>为了更深入地了解facet的三个特征，作者画出了三种特征的importance scores，如下图所示:</p>

<center><img src="../assets/img/posts/20221010/39.jpg" /></center>

<p>importance score表明了数的预测结果相对于特征值的变化有多大，值越高说明该特征对于GBT来说越重要，作者将这些值归一化。观察发现，facet的三个特征中，Noisy-OR最重要，其次是KL散度，最后是匹配状态，这和表格7得出的结果一致。同时也发现语义相似度作为特征来说表现其实已经很好了，比但看facet的任意一个特征都强，但是却不如facet的三个特征加起来使用，变相证明了作者工作的有效性。还有就是虽然Semantic entailment作为特征来说表现不佳，但是也能将模型的整体性能提升一点</p>

<h2 id="36-discussion">3.6. Discussion</h2>
<p>总的来说，作者用两个数据集进行了两个实验，第一个实验首先得到了五种类型的答案的分布情况，然后用GBT实现了通过语义面匹配状态的分布来预测答案的类型。第二个实验首先给出了生产语义面的方法，然后提出了预测语义面匹配状态的网络，有了语义面匹配状态后，就可以得到facet的三个特征: state分布、KL散度和Noisy-OR。实验发现Noisy的效果很好，并且利用confidence进行预测是一种新思路，可能会对后续研究有所帮助。</p>

<p>然后作者分析实验结果发现，模型目前能明显区分出correct和non domain、irrelevant，但是与partially correct、contradictory相比却并不能很好的区分开。作者认为可能是partially和correct在语义上可能并不冲突导致。</p>

<p>接着，作者着眼于强调论文研究的重要性。论文里提出的facet不仅能提高模型的性能，更重要的是它们可以为更详细的反馈提供相关信息，这是教育系统为学习者提供反馈不可缺少的部分。具体来说，facet的出现让评分的可解释性更强。这样我们就可以分析学生答案是哪个知识点没有答对，或者是哪个知识点没有出现在答案中。这样，教育系统就能为学习者提供有效的反馈，可以提供点对点的反馈，比如这个facet为什么没有expressed等等。facet的实用价值高，它除了作为feature外，还可以使答案分析的可解释性更强。</p>

<h2 id="37-conclusion">3.7. Conclusion</h2>
<p>之前的许多研究往往关注评估学生回答的模型的表现，我们将待评估问题的知识点分解为从属的语义单元，称为语义面。每一个语义面都代表知识的某个方面，而它们共同构成参考答案的语义。然后作者实现了两个实验来说明研究的有效性，具体内容在discussion中已经说明。</p>

<p>future work: larger corpora, 优化语义面提取的算法, 预测state的算法使用更新的网络(比如bert及其衍生网络), facet的实用价值(比如提高解释性和用作feedback)</p>

<h2 id="38-小结">3.8. 小结</h2>
<p>facet这篇论文的着重点就是提出了语义面，这篇论文的出发点其实很好想到，就是评估模型的性能可能无法有很大的提升了，那么我将答案分成好几个小部分进行评估是否能提升模型的性能？于是便有了这篇论文，facet可以理解成参考答案的知识点，它是否在学生答案中表达出就是它的states。论文做了两个工作，第一个是直接基于有facet标注和state标注的数据集上进行实验，因为不同问题的facet数量不一样，所以用state的分布来表达可能会更好，首先通过统计得到了不同类型答案的state分布，这为后续KL散度这一特征有帮助。然后使用GBT作为预测模型，通过state的分布来预测答案的类型，得到了较好的效果。第二个实验基于正常的数据集，就是不包含facet和state的标签，这也是比较一般的情况，毕竟标注facet和state非常贵。首先每个问题没有了facet，那么首先就得设计算法来得到问题的facet，作者提出了一种基于Dependency parsing tree得到facet的方法，并在附录B对这个算法进行了评价。得到facet后还是没有state，所以得设计一个网络来得到facet的状态，模型的输入是facet和学生的response，利用LSTM来获得隐状态，并用注意力机制找到facet的近似表示，然后连结了facet的隐状态的各类信息，最后加个MLP得到state。到目前为止，已经有了facet和state，那么就可以得到facet的特征来作预测，相当于特征工程。facet的特征使用到的有: state分布, 与第一个工作中真实分布对比的KL散度, 运用到confidence的Noisy-OR。除此之外，作者还对比了其余的特征，比如语义相似度和semantic entailment(这是已有的工作)。最后将这些特征fusion之后的效果比较好</p>

<h1 id="4-todo">4. TODO</h1>
<ul>
  <li>看GBT, GPT, ELMo</li>
  <li>深入了解一下ASAG用特征工程解决的思路</li>
  <li>想想改进方向</li>
  <li>代码</li>
</ul>]]></content><author><name>Quehry</name></author><category term="notes" /><summary type="html"><![CDATA[read and arrange paper about short answer assessment]]></summary></entry><entry><title type="html">AutoEncoder系列整理</title><link href="http://localhost:4000/AutoEncoder-Series.html" rel="alternate" type="text/html" title="AutoEncoder系列整理" /><published>2022-10-08T00:00:00+08:00</published><updated>2022-10-08T00:00:00+08:00</updated><id>http://localhost:4000/AutoEncoder-Series</id><content type="html" xml:base="http://localhost:4000/AutoEncoder-Series.html"><![CDATA[<!-- TOC -->

<ul>
  <li><a href="#1-ae简介">1. AE简介</a></li>
  <li><a href="#2-dae">2. DAE</a></li>
  <li><a href="#3-vae">3. VAE</a>
    <ul>
      <li><a href="#31-数学原理">3.1. 数学原理</a>
        <ul>
          <li><a href="#311-variational-lower-bound">3.1.1. variational lower bound</a></li>
          <li><a href="#312-sgvb-estimator-and-aevb-algorithm">3.1.2. SGVB estimator and AEVB algorithm</a></li>
        </ul>
      </li>
      <li><a href="#32-vae模型">3.2. VAE模型</a></li>
      <li><a href="#33-总结">3.3. 总结</a></li>
    </ul>
  </li>
  <li><a href="#4-vqvae">4. VQVAE</a>
    <ul>
      <li><a href="#41-简介">4.1. 简介</a></li>
      <li><a href="#42-vqvae模型">4.2. VQVAE模型</a>
        <ul>
          <li><a href="#421-离散隐变量">4.2.1. 离散隐变量</a></li>
          <li><a href="#422-模型">4.2.2. 模型</a></li>
          <li><a href="#423-生成过程">4.2.3. 生成过程</a></li>
        </ul>
      </li>
      <li><a href="#43-vqvae2">4.3. VQVAE2</a></li>
      <li><a href="#44-其他">4.4. 其他</a></li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h1 id="1-ae简介">1. AE简介</h1>
<p>AutoEncoder，即AE，自编码器，是一类在半监督学习和非监督学习中使用的人工神经网络，其功能是通过将输入信息作为学习目标，对输入信息进行表征学习(representation learning)，编码其实就是特征表示</p>

<p>半监督学习(semi-supervised learning)的训练数据一部分是有标签的，另一部分没有标签，而没标签的数量一般大于有标签数据的数量</p>

<p>自编码器的原理如下图所示，encoder首先读取input，将输入转换成高效的内部表示(code)，然后再由decoder输出输入数据的类似物</p>
<center><img src="../assets/img/posts/20221008/1.jpg" /></center>

<p>自编码器属于自监督学习的范畴，算法把输入作为监督信号来学习，encoder的作用其实就是对输入向量进行特征降维，常见的降维算法有主成分分析法PCA，但PCA本质上是一种线性变换，提取特征的能力有限</p>

<p>自编码器利用神经网络来学习输入的特征表达，AE利用数据x本身作为监督信号来指导神经网络的训练，即希望神经网络能学到映射$f_\theta$:x-&gt;x</p>
<center><img src="../assets/img/posts/20221008/2.jpg" /></center>
<p>把网络切分为两个部分，前面的子网络尝试学习映射关系$g_{\theta1}:x-&gt;z$，后面的子网络尝试学习映射关系$h_{\theta2}:z-&gt;x$，即编码器和解码器，编码器和解码器共同完成了输入数据x的编码、解码过程，把整个网络模型叫做AutoEncoder，模型根据输出与输入的距离函数作为损失函数来优化AE，随机梯度下降</p>

<p>假设输入为x，中间层为y，最终输出为z，那么y=s(Wx+b)，s是激活函数，z=s(W’y+b’)</p>

<p>接下来我将整理AE家族的一些模型，有DAE、VAE、VQVAE，当然不可能涵盖所有的模型，尽量介绍一些使用较多的模型</p>

<h1 id="2-dae">2. DAE</h1>
<p>通过Auto-Encoder得到的模型往往存在过拟合的风险，为了学习到较鲁棒的特征，可以在网络的输入层引入随机噪声，这种方法称为降噪自编码器(Denoising autoencoder, DAE)，为了更了解模型的原理和架构，我去阅读了DAE的<a href="https://dl.acm.org/doi/abs/10.1145/1390156.1390294" target="_blank">论文</a></p>

<p>作者的想法是让网络从corrputed的输入还原出原始输入，通过这个方法来提高模型的鲁棒性。corrputed的方法: 对于每一个输入x，随机选取$v_d$个元素置零，其他的部分保持不变，那么网络的目标就变成了对这些位置进行填空(fill-in)，这和BERT中Masked LM的思想差不多</p>
<center><img src="../assets/img/posts/20221008/3.jpg" /></center>
<p>论文的其他部分着重介绍为什么这种denoising的思想有用以及背后的数学原理</p>

<h1 id="3-vae">3. VAE</h1>
<p>AutoEncoder被指责只能简单地记住数据，在生成数据的能力上很差，于是变分自编码器VAE(Variational auto-encoder)出现了。<a href="https://arxiv.org/abs/1312.6114" target="_blank">论文链接</a></p>

<p>作者提出了一种autoencoding variational bayesian(AEVB)算法，在AEVB算法中，通过使用SGVB(stochastic gradient variational bayes)估计器优化识别模型，使推断和学习更加有效，该识别模型允许我们使用简单的采样来获得非常有效的近似后验分布</p>
<h2 id="31-数学原理">3.1. 数学原理</h2>
<p>数据集X由独立同分布采样的N个x组成，即$X={x^{(i)}}_{i=1}^N$。我们假设x的生成过程由两部分组成:</p>
<ul>
  <li>$z^{(i)}$采样自先验分布$p_{\theta*}(z)$</li>
  <li>$x^{(i)}$由似然函数$p_{\theta*}(x|z)$生成</li>
</ul>

<p>作者说不会对边缘概率分布和后验概率分布做一般的近似假设，所以一些常用的方法可能不行，作者提出用辨别模型$q_\Phi(z|x)$作为真实后验概率$p_\theta(z|x)$的近似，这里的$\Phi$也就是变分参数(variational parameters)，variational有两个作用，一个是可以用q(z|x)来近似p(z|x)，另一个是优化了lower bound的梯度计算</p>

<h3 id="311-variational-lower-bound">3.1.1. variational lower bound</h3>
<p>通过最大边缘似然函数$p_\theta(x)$来获得参数$\theta$的估计值，对数似然函数log$p_\theta(x)$可写成(x都指$x^{(i)}$):</p>

<p>
\begin{equation}
logp_\theta(x^{(i)})=D_{KL}(q_\phi(z\mid x^{(i)})\|p_\theta(z\mid x^{(i)}))+\mathcal{L}(\theta, \phi;x^{(i)})
\end{equation}
</p>

<p>推导过程为:</p>

<p style="font-size: 18px">
\begin{equation}
\begin{aligned}
logp_\theta(x)&amp;=E_{z\sim q_\phi(z\mid x)}[logp_\theta(x)] \\
&amp;=E_{z\sim q_\phi(z\mid x)}[logq_\phi(z\mid x)-logp_\theta(z\mid x)]+E_{z\sim q_\phi(z\mid x)}[-logq_\phi(z\mid x)-logp_\theta(x, z)] \\
&amp;=D_{KL}(q_\phi(z\mid x)\|p_\theta(z\mid x))+\mathcal{L}(\theta,\phi;x)
\end{aligned}
\end{equation}
</p>

<p>等式右边的第一项是KL散度，第二项是Evidence lower bound(ELBO)，因为KL散度非负，所以有:</p>
<center><img src="../assets/img/posts/20221008/6.jpg" /></center>
<p>ELBO可以进一步推导，有:</p>
<center><img src="../assets/img/posts/20221008/7.jpg" /></center>
<p>推导和前面类似，省略</p>

<p>我们希望最大化ELBO来获得参数$\Phi$和$\theta$，可以用梯度上升法，然而对ELBO求梯度有点困难，作者提出了SGVB estimator来解决这个问题</p>

<h3 id="312-sgvb-estimator-and-aevb-algorithm">3.1.2. SGVB estimator and AEVB algorithm</h3>
<p>首先介绍一下蒙特卡洛gradient estimator:</p>
<center><img src="../assets/img/posts/20221008/8.jpg" /></center>
<p>简单来说，蒙特卡洛就是将期望外的梯度符号移到了期望内</p>

<p>接下来我们需要应用一种再参数化(reparameterization)的trick来实现似然函数梯度的计算，具体来说就是服从q(z|x)分布的随机变量z可以写成可微的形式:</p>
<center><img src="../assets/img/posts/20221008/9.jpg" /></center>
<p>其中$\epsilon$就是噪声，那么再经过一系列的推导，就可以得出似然函数的梯度</p>

<p>AEVB算法:</p>
<center><img src="../assets/img/posts/20221008/10.jpg" /></center>

<h2 id="32-vae模型">3.2. VAE模型</h2>
<p>VAE是AEVB算法的一个实例，VAE在AEVB算法的基础上做了以下约束:</p>
<ul>
  <li>使用encoder来模拟后验分布$q_\Phi(z|x)$，并假设其满足多元混合高斯</li>
</ul>
<center><img src="../assets/img/posts/20221008/11.jpg" /></center>
<p>其中$\mu^{(i)}$和$\sigma^{(i)}$是输入$x^{(i)}$经过MLP后得到的结果，模型使用两个网络分别来估计每个样本对应的隐状态$z^{(i)}$的均值和方差</p>
<ul>
  <li>假设先验概率$p_\theta(z)$满足多元正态分布模型，即$p_\theta(z)~N(z;0,I)$</li>
  <li>用decoder来模拟$p_\theta(x|z)$</li>
  <li>使用重参数的trick来获得z，因为这里假设的是正态分布，所以z可以简单理解成$z=\mu+\sigma * \epsilon$，其中$\epsilon$采样自均值为0，方差为1的正态分布
这样我们就获得了VAE模型</li>
</ul>
<center><img src="../assets/img/posts/20221008/13.jpg" /></center>

<h2 id="33-总结">3.3. 总结</h2>
<center><img src="../assets/img/posts/20221008/12.jpg" /></center>
<p>这是我自己画的一张VAE模型图，encoder和decoder可以都是MLP。encoder的目的是从输入数据x中学习到z重参数化需要的变量$\mu$和$\sigma$，之后我们就可以采样噪声来获得z的先验分布，然后经过decoder得到重构的输出x，训练的过程其实就是学习x分布的过程。训练完成后，我们就可以得到生成模型$p_\theta(x|z)p_\theta(z)$，其中$p_\theta(x|z)$就是decoder，先验分布$p_\theta(z)$为正态分布，从先验分布$p_\theta(z)$随机采样一个z送入decoder，就可以得到与训练数据类似的输出，所以VAE是一个生成模型</p>

<p><a href="https://zhuanlan.zhihu.com/p/452743042" target="_blank">一篇介绍VAE很详细的博客</a></p>

<h1 id="4-vqvae">4. VQVAE</h1>
<h2 id="41-简介">4.1. 简介</h2>
<p><a href="https://proceedings.neurips.cc/paper/2017/hash/7a98af17e63a0ac09ce2e96d03992fbc-Abstract.html" target="_blank">论文链接</a>，VQVAE是DeepMind于2017年提出的一种基于离散隐变量(Discrete Latent variables)的生成模型，相比于VAE，VQVAE有两个重要的区别: 首先VQVAE采用离散隐变量(VAE采用的是连续隐变量)，其次VQVAE需要单独训练一个基于自回归的模型(比如PixelCNN)来学习先验概率，而不是像VAE那样采用一个固定的先验分布。VQVAE是一个强大的无监督表征学习模型，它学习的离散编码有很强的表征能力，DALLE第一版就是基于VQVAE的</p>

<h2 id="42-vqvae模型">4.2. VQVAE模型</h2>
<p>VQ-VAE的全称是Vector Quantised Variational AutoEncoder，与VAE的主要区别是使用了离散的隐变量和学习出来的prior(非固定)</p>

<h3 id="421-离散隐变量">4.2.1. 离散隐变量</h3>
<p>首先定义一个embedding space，记为e$\in R^{K*D}$，K就是embedding space的大小，D就是每个embedding vector的大小，embedding space由K个长度为D的向量组成。</p>
<center><img src="../assets/img/posts/20221008/15.jpg" /></center>
<p>原始输入x经过encoder后变成$z_e(x)$，然后我们需要向量化$z_e(x)$，即把它变成一个向量，这里就需要embedding space发挥作用，我们从embedding space的K个向量中选择一个作为$z_e(x)$向量化的结果，作者的做法是最临近查找(nearest neighbour look-up，即选择欧式距离最小的向量$e_{k}$作为向量化结果)，将向量化的结果$z_q(x)$输入decoder:</p>
<center><img src="../assets/img/posts/20221008/16.jpg" /></center>
<p>模型在训练过程中需要调整的参数就是encoder的参数、decoder的参数以及embedding space的参数。在训练过程中VQ-VAE其实没有用到先验分布prior，所以后面需要单独训练一个先验模型来生成数据。这里的z对于不同的任务是不同维度的，为了简便，用一维来举例，那么z的后验分布$q(z|x)$可以看成一个多类分布:</p>
<center><img src="../assets/img/posts/20221008/17.jpg" /></center>

<h3 id="422-模型">4.2.2. 模型</h3>
<p>模型如下图所示:</p>
<center><img src="../assets/img/posts/20221008/14.jpg" /></center>
<p>由于上面提到的argmin操作不可导，所以梯度就无法逆传播到encoder，论文采用了一种straight-through estimator的方法来解决这个问题，所谓straight-through estimator其实就是计算梯度时，忽略它而采用上游得到的梯度，在这里，就是用$z_q(x)$的梯度作为$z_e(x)$的梯度。损失函数的定义如下:</p>
<center><img src="../assets/img/posts/20221008/18.jpg" /></center>
<p>损失函数的第一项是重建误差，它用来优化encoder和decoder的参数，由于在计算梯度时采用了straight-through estimator的方法，所以重建误差不涉及embedding space的参数的更新，为了学习embedding space的参数，用L2误差来移动embedding space的特征向量$e_i$，也就是损失函数的第二项，这里的sg指的时stop gradient的操作，意味着这个L2损失只会更新embedding space的参数，不会传递到encoder。除此之外，论文还额外增加了一个commitment loss(损失函数第三项)，其主要目的是约束encoder的输出和embedding space保持一致，$\beta$的取值对算法的效果不会产生很大的影响，论文中取值0.25</p>

<p>关于先验模型prior，在训练VQVAE的主体过程中保持一致，在VQVAE训练完成后，作者为prior训练一个自回归分布p(z)，对于z是图片的情况下，用PixelCNN，对于z是音频的情况下，用WaveNet。VQVAE适用于多种模态的数据。embedding space也叫做codebook。</p>

<h3 id="423-生成过程">4.2.3. 生成过程</h3>
<p>VAE的目的是训练完成后, 丢掉encoder, 在prior上直接采样, 再加上decoder就能做生成。如果我们现在独立地采样HxW个z, 然后查表(codebook)得到维度为HxWxD的$z_q(x)$, 那么生成的图片在空间上的每块区域之间几乎就是独立的。因此我们需要让各个z之间有关系, 因此用PixelCNN, 对这些z建立一个autoregressive model: $p(z_1, z_2, z_3, …)=p(z_1)p(z_2|z_1)p(z_3|z_1, z_2)…$</p>

<h2 id="43-vqvae2">4.3. VQVAE2</h2>
<p>VQVAE2是VQVAE的升级版, 可以生成非常清晰的高分辨率图片. 主要变化就是把VQ-VAE的encoder和decoder进行了分层, bottom层对local feature进行建模, top层对global feature进行建模; 为了让top层能更有效地提取global信息, 在网络中加入了self attention</p>

<h2 id="44-其他">4.4. 其他</h2>
<ul>
  <li>知乎上两个讲解很详细的博客:
    <ul>
      <li><a href="https://zhuanlan.zhihu.com/p/91434658" target="_blank">知乎1</a></li>
      <li><a href="https://zhuanlan.zhihu.com/p/463043201" target="_blank">知乎2</a></li>
    </ul>
  </li>
  <li>VQVAE的特点是可学习的prior和codebook作离散化的设计，影响了很多后续的模型，包括BEiT和DALLE</li>
</ul>]]></content><author><name>Quehry</name></author><category term="notes" /><summary type="html"><![CDATA[Information about autoencoder series]]></summary></entry><entry><title type="html">概率统计</title><link href="http://localhost:4000/Probability-and-Statistics.html" rel="alternate" type="text/html" title="概率统计" /><published>2022-09-27T00:00:00+08:00</published><updated>2022-09-27T00:00:00+08:00</updated><id>http://localhost:4000/Probability-and-Statistics</id><content type="html" xml:base="http://localhost:4000/Probability-and-Statistics.html"><![CDATA[<h1 id="1-链接">1. 链接</h1>
<ul>
  <li><a href="https://blog.csdn.net/guleileo/article/details/80971601" target="_blank">贝叶斯、先验、后验、似然等基础知识</a></li>
</ul>

<h1 id="2-kl散度">2. KL散度</h1>
<h2 id="21-简介">2.1. 简介</h2>
<p>KL散度就是相对熵，是两个概率分布间差异的非对称性度量</p>

<h2 id="22-定义">2.2. 定义</h2>
<p>设$P(x)$与$Q(x)$是随机变量X上的两个概率分布，则在离散和连续变量的情形下，KL散度的定义分别为:</p>

<p>$KL(P||Q)=\sum P(x)log\frac{P(x)}{Q(x)}$</p>

<p>$KL(P||Q)=\int P(x)log\frac{P(x)}{Q(x)}dx$</p>

<h1 id="3-置信度">3. 置信度</h1>
<h2 id="31-置信水平置信区间">3.1. 置信水平/置信区间</h2>
<p>置信水平(confidence level)是指特定个体对待定命题真实性相信的程度。置信水平是指总体参数值落在样本统计值某一区间的概率，而置信区间是指在某一置信水平下，样本统计值与总体参数值间误差范围。置信区间越大，置信水平越高。</p>]]></content><author><name>Quehry</name></author><category term="notes" /><summary type="html"><![CDATA[Information about autoencoder series]]></summary></entry><entry><title type="html">GAN</title><link href="http://localhost:4000/GAN.html" rel="alternate" type="text/html" title="GAN" /><published>2022-09-27T00:00:00+08:00</published><updated>2022-09-27T00:00:00+08:00</updated><id>http://localhost:4000/GAN</id><content type="html" xml:base="http://localhost:4000/GAN.html"><![CDATA[<h1 id="目录">目录</h1>

<!-- TOC -->

<ul>
  <li><a href="#目录">目录</a></li>
  <li><a href="#1-博客简介">1. 博客简介</a></li>
  <li><a href="#2-gan简介">2. GAN简介</a></li>
  <li><a href="#3-adversarial-nets">3. Adversarial nets</a></li>
  <li><a href="#4-理论原理">4. 理论原理</a></li>
  <li><a href="#5-其他">5. 其他</a></li>
</ul>

<!-- /TOC -->

<h1 id="1-博客简介">1. 博客简介</h1>
<p>GAN的全称是generative adversarial nets，是Goodfellow于2014年提出的新的生成模型框架，这种全新的生成模型框架有很多应用和变种，这篇博客主要介绍最开始的GAN的原理和论文整理，这里阅读的论文不是最终版(区别在于related work不同)，下面列出一些链接</p>
<ul>
  <li><a href="https://arxiv.org/abs/1406.2661" target="_blank">论文链接</a></li>
  <li><a href="https://www.bilibili.com/video/BV1rb4y187vD/?spm_id_from=333.788&amp;vd_source=64c99329fc39a0e3f42825a4c837e2a5" target="_blank">李沐讲解</a></li>
</ul>

<h1 id="2-gan简介">2. GAN简介</h1>
<p>GAN是一种全新的生成模型框架，它包含两个部分，生成模型G和辨别模型D，G的作用是捕捉数据的分布，D的作用是辨别数据来源于真实数据分布还是G生成的数据分布。生成模型训练过程就是让D犯错的可能性更高。GAN框架其实就是一个minmax game，如果G和D都是MLP的话，那么整个系统可以用逆传播机制训练。GAN的作者举了一个简单的例子介绍模型训练过程，生成模型可以看成印假钞的团伙，辨别模型可以看成警察，双方都在训练中提升自己的能力，最终希望达到的效果是警察无法分辨出一张假钞是真币还是假币。论文只介绍了一种特殊情况，就是G和D都是MLP的情况，作者把这种情况称为Adversarial nets</p>

<h1 id="3-adversarial-nets">3. Adversarial nets</h1>
<p>为了让生成模型学习到分布$p_g$(分布尽量和原始数据x的分布一致)，需要定义输入噪音的先验分布$p_z(z)$，$G(z;\theta_g)$表示噪音z输入生成模型的结果，G是一个可微分的函数，这里是MLP，参数为$\theta_g$。$D(x;\theta_d)$表示输入x后的辨别模型的结果，输出是一个标量，表示x来自于真实数据分布的概率。</p>

<p>也就是说，D和G的价值函数V(G, D)可表示为:</p>
<center><img src="../assets/img/posts/20220927/2.jpg" /></center>
<p>辨别模型D的目标是最大化价值函数的值，D(x)的取值在0-1之间，所以价值函数越大说明辨别模型D的效果越好，生成模型G的目标是最小化价值函数的值。GAN训练生成模型和辨别模型的过程为:</p>
<center><img src="../assets/img/posts/20220927/3.jpg" /></center>
<p>绿色的线是生成模型，蓝色虚线是辨别模型，黑色的散点线是原始数据分布</p>

<h1 id="4-理论原理">4. 理论原理</h1>
<p>算法原理由下面这一张图片展示:</p>
<center><img src="../assets/img/posts/20220927/4.jpg" /></center>
<p>在每个迭代周期的每个批量中，我们有m个取自先验分布的噪音z，其中z$\sim$ $p_g(z)$和m个取自真实分布的x，其中x$\sim$ $p_{data}(x)$，先训练辨别器D，沿着梯度上升的方向更新参数，然后在沿着log(1-D(G($z^{(i)}$)))的梯度下降的方向更新参数。</p>

<p>接下来介绍了一些命题和证明和一些定理，证实了GAN用到的价值函数和目标函数的可行性</p>

<h1 id="5-其他">5. 其他</h1>
<ul>
  <li>GAN在刚提出的时候还是有很多缺点的，比如模型还是比较难训练的，但是后续有很多很多的工作来优化原始的GAN模型，所以GAN更像是抛出了一个引子，让后续模型来优化它</li>
  <li>GAN本质上就是左右手互博，目标函数设计的也很好</li>
</ul>]]></content><author><name>Quehry</name></author><category term="note" /><summary type="html"><![CDATA[arrange notes]]></summary></entry><entry><title type="html">重要时间点及事件</title><link href="http://localhost:4000/Important-Event.html" rel="alternate" type="text/html" title="重要时间点及事件" /><published>2022-09-26T00:00:00+08:00</published><updated>2022-09-26T00:00:00+08:00</updated><id>http://localhost:4000/Important-Event</id><content type="html" xml:base="http://localhost:4000/Important-Event.html"><![CDATA[<!-- 2022.9.23 报9月工资 -->
<!-- 2022.10.10 选3pi的项目 -->
<!-- 2022.10.16 二十大 -->]]></content><author><name>Quehry</name></author><category term="daily" /><summary type="html"><![CDATA[for query]]></summary></entry><entry><title type="html">T5模型</title><link href="http://localhost:4000/T5%E6%A8%A1%E5%9E%8B.html" rel="alternate" type="text/html" title="T5模型" /><published>2022-09-19T00:00:00+08:00</published><updated>2022-09-19T00:00:00+08:00</updated><id>http://localhost:4000/T5%E6%A8%A1%E5%9E%8B</id><content type="html" xml:base="http://localhost:4000/T5%E6%A8%A1%E5%9E%8B.html"><![CDATA[<!-- TOC -->

<ul>
  <li><a href="#1-t5简介">1. T5简介</a></li>
  <li><a href="#2-读论文">2. 读论文</a>
    <ul>
      <li><a href="#21-introduction">2.1. Introduction</a></li>
      <li><a href="#22-setup">2.2. Setup</a>
        <ul>
          <li><a href="#221-model">2.2.1. Model</a></li>
          <li><a href="#222-the-colossai-clean-crawled-corpusc4">2.2.2. THE Colossai Clean Crawled Corpus(C4)</a></li>
          <li><a href="#223-downstream-tasks">2.2.3. Downstream Tasks</a></li>
          <li><a href="#224-input-and-output-format">2.2.4. Input and Output Format</a></li>
        </ul>
      </li>
      <li><a href="#23-experiments">2.3. Experiments</a>
        <ul>
          <li><a href="#231-baseline">2.3.1. Baseline</a>
            <ul>
              <li><a href="#2311-model">2.3.1.1. Model</a></li>
              <li><a href="#2312-training">2.3.1.2. Training</a></li>
              <li><a href="#2313-vocabulary">2.3.1.3. Vocabulary</a></li>
              <li><a href="#2314-unsupervised-objective">2.3.1.4. Unsupervised Objective</a></li>
              <li><a href="#2315-baseline-performance">2.3.1.5. Baseline Performance</a></li>
            </ul>
          </li>
          <li><a href="#232-architectures">2.3.2. Architectures</a>
            <ul>
              <li><a href="#2321-model-structures">2.3.2.1. Model Structures</a></li>
              <li><a href="#2322-comparing-different-model-structures">2.3.2.2. Comparing Different Model Structures</a></li>
              <li><a href="#2323-objectives">2.3.2.3. Objectives</a></li>
              <li><a href="#2324-results">2.3.2.4. Results</a></li>
            </ul>
          </li>
          <li><a href="#233-unsupervised-objectives">2.3.3. Unsupervised Objectives</a></li>
          <li><a href="#234-pre-training-data-set">2.3.4. Pre-training Data Set</a></li>
          <li><a href="#235-training-strategy">2.3.5. Training Strategy</a></li>
          <li><a href="#236-scaling">2.3.6. Scaling</a></li>
          <li><a href="#237-putting-it-all-together">2.3.7. Putting It All Together</a></li>
        </ul>
      </li>
      <li><a href="#24-reflection">2.4. Reflection</a></li>
    </ul>
  </li>
  <li><a href="#3-个人总结">3. 个人总结</a></li>
</ul>

<!-- /TOC -->

<h1 id="1-t5简介">1. T5简介</h1>
<p>T5的全称是text-to-text transfer transformer，是google于2019年推出的NLP领域的大型预训练模型，T5模型将NLP领域的任务均看成text to text类型，在众多任务的表现十分优异，模型本身的结构就是transformer的encoder-decoder结构，但是预训练目标以及其他细节有所区别</p>

<p>相关链接:</p>
<ul>
  <li><a href="https://arxiv.org/abs/1910.10683" target="_blank">论文</a></li>
  <li><a href="https://github.com/google-research/text-to-text-transfer-transformer" target="_blank">github</a></li>
  <li><a href="https://ai.googleblog.com/2020/02/exploring-transfer-learning-with-t5.html" target="_blank">google博客</a></li>
  <li><a href="https://huggingface.co/docs/transformers/model_doc/t5" target="_blank">huggingface文档</a></li>
</ul>

<h1 id="2-读论文">2. 读论文</h1>
<p>摘要: 将所有的以文本为基础的语言任务变成text to text格式的任务，论文比较了不同的预训练目标、架构、无标签数据集、迁移方式在NLU任务上的表现。论文还新建了数据集C4，T5模型在很多benchmark上能做到SOTA，包括总结、QA、文本分类等。此外，T5模型和C4数据集均开源</p>

<h2 id="21-introduction">2.1. Introduction</h2>
<p>把所有的文本处理问题看成”text-to-text”问题，也即输入一段文本，输出一段文本。</p>

<center><img src="../assets/img/posts/20220919/2.jpg" /></center>

<h2 id="22-setup">2.2. Setup</h2>
<h3 id="221-model">2.2.1. Model</h3>
<p>Transformer架构一开始用于机器翻译任务，自注意力可以看成将一段序列的每个词元替换成其他词元的加权平均。T5模型的架构和Transformer的encoder-decoder结构基本一致，区别在于T5模型去除了层归一偏差，将层归一化放在残差路径外，使用了一种不同的位置嵌入方案。</p>

<h3 id="222-the-colossai-clean-crawled-corpusc4">2.2.2. THE Colossai Clean Crawled Corpus(C4)</h3>
<p>这一部分主要介绍了C4数据集的相关内容。Common Crawl是一个公开的<a href="https://commoncrawl.org/" target="_blank">数据集网站</a>，它可以提供从网页爬取的文本，但是这些文本数据存在很多问题，论文提出了以下的几种方法来让数据集更clean:</p>
<ul>
  <li>只保留以终点符号(即句点，感叹号，问号或引号)结尾的行</li>
  <li>丢弃少于五个句子的page，只保留超过3个单词的句子</li>
  <li>删除任何包含有在<a href="https://github.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" target="_blank">List-of-Dirty</a>网站中出现的单词的网页</li>
  <li>删除包含Javascript的行</li>
  <li>删除出现“lorem ipsum”短语的page</li>
  <li>删除所有包含大括号的页面</li>
  <li>对数据集进行重复数据删除，当连续的三句话重复出现时只保留一个</li>
  <li>使用langdetect工具过滤掉非英文的页面</li>
</ul>

<h3 id="223-downstream-tasks">2.2.3. Downstream Tasks</h3>
<p>T5模型为了测量总体的语言学习能力，在很多benchmark上测试性能，比如机器翻译、QA、摘要总结、文本分类。在GLUE和SuperGLUE上测试文本分类能力，在CNN/Daily Mail上测试摘要总结能力，在SQuAD上测试QA能力…</p>

<h3 id="224-input-and-output-format">2.2.4. Input and Output Format</h3>
<p>正如在introduction中提及的一样，论文将所有的task看成text-to-text格式。这种框架为预训练和微调提供了一致的训练目标。模型用极大似然目标训练(教师强制)。为了区分不同任务，给input前加上task-specific前缀。比如为英翻德加上前缀“translate English to German: ”，论文附录里有各种任务的前缀与相关处理方法。</p>

<h2 id="23-experiments">2.3. Experiments</h2>
<p>论文搭建模型的出发点是比较不同的预训练目标、模型架构、无标签数据集等方面，从中选择表现最好的部分组成T5模型。每次只改变baseline的一部分，其余部分保持不变。BERT不太好做生成任务，比如机器翻译和摘要总结</p>

<h3 id="231-baseline">2.3.1. Baseline</h3>
<p>也即基准</p>
<h4 id="2311-model">2.3.1.1. Model</h4>
<p>模型选用Transformer的Encoder-Decoder架构，相比于只使用Encoder来说，该架构在分类和生成任务上取得更好的效果</p>

<h4 id="2312-training">2.3.1.2. Training</h4>
<p>所有的任务都是text-to-text类型，这让作者能用极大似然法和交叉熵损失来训练模型，优化器选择AdaFactor。在测试阶段，选用概率最高的词元作为输出。在预训练阶段，采用逆平方根学习率策略，即学习率会随着迭代周期下降。预训练阶段，模型迭代524288步。在微调阶段，模型迭代262144步，同时使用固定的学习率。</p>

<h4 id="2313-vocabulary">2.3.1.3. Vocabulary</h4>
<p>由于模型任务包含了翻译任务，所以词表不仅包含了英语词汇，还包括德语、法语和罗马尼亚语词汇。词表是预定义的，所以模型输出不会出现超出词表的词汇</p>

<h4 id="2314-unsupervised-objective">2.3.1.4. Unsupervised Objective</h4>
<p>模型预训练过程需要无标签的数据。过往的预训练模型训练过程都采用masked language modeling(denosing objectives)作为预训练目标，大家发现这种处理方式能取得很好的结果。对于去噪目标，模型需要预测被遮掩的词元。借鉴于BERT的经验，模型随机采样并选择丢弃了15%的词元(作为masked)，并且连续的掩蔽词元只被一个sentinel词元替代。下面展示了一个掩蔽的例子</p>

<center><img src="../assets/img/posts/20220919/3.jpg" /></center>

<h4 id="2315-baseline-performance">2.3.1.5. Baseline Performance</h4>
<p>展示了baseline模型在不同benchmark上的表现，不同的benchmark使用不同的指标</p>

<center><img src="../assets/img/posts/20220919/4.jpg" /></center>

<h3 id="232-architectures">2.3.2. Architectures</h3>
<p>比较不同框架在benchmark上的表现</p>

<h4 id="2321-model-structures">2.3.2.1. Model Structures</h4>
<p>作者选择了三种不同的架构进行对比，第一种架构是传统的Transformer的encoder-decoder架构，第二种是language modeling(encoder)架构，BERT用的就是这个架构，下一步的输出依赖于前一步的预测，第三种是Prefix Language Model，为text-to-text任务提供任务的前缀，比如翻译任务就是加上前缀translate English to German:</p>

<center><img src="../assets/img/posts/20220919/5.jpg" /></center>

<h4 id="2322-comparing-different-model-structures">2.3.2.2. Comparing Different Model Structures</h4>
<p>比较了不同模型的层数，参数和FLOPS</p>

<h4 id="2323-objectives">2.3.2.3. Objectives</h4>
<p>除了架构的区别外，还比较了不同预训练目标带来的区别，比如使用Denosing Objectives时，LM架构需要把输入和输出连接起来进行连续的预测，使用LM目标时，LM架构需要从头预测到尾</p>

<h4 id="2324-results">2.3.2.4. Results</h4>
<p>直接看表格，可以发现第一种encoder-decoder架构的表现最好</p>

<center><img src="../assets/img/posts/20220919/6.jpg" /></center>

<h3 id="233-unsupervised-objectives">2.3.3. Unsupervised Objectives</h3>
<p>本章从以下几个角度比较Unsupervised Objectives，实验得出结论，选取BERT-style，Corruption Strategies选择Replace spans，Corruption rate选择15%，Corrupted span length选择对每个词元都决定是否corrupted(独立)，也即i.i.d.，这样得出的效果最好</p>

<center><img src="../assets/img/posts/20220919/7.jpg" /></center>

<h3 id="234-pre-training-data-set">2.3.4. Pre-training Data Set</h3>
<p>最终选择了全size的C4数据集作为预训练数据集</p>

<h3 id="235-training-strategy">2.3.5. Training Strategy</h3>
<p>比较了微调的不同方案、比较了多任务同时训练和单任务训练的效果，最终发现baseline的效果最好，即预训练加下游任务微调</p>

<h3 id="236-scaling">2.3.6. Scaling</h3>
<p>尝试了扩大模型规模的几种方式，最后发现baseline选择的预训练规模是最合适的，使用较大的模型可能会使下游的微调和推断变得更加昂贵</p>

<h3 id="237-putting-it-all-together">2.3.7. Putting It All Together</h3>
<p>这一部分介绍了模型最终的一些调整内容</p>
<ul>
  <li>预训练目标: 掩蔽片段平均长度为3，同时掩蔽比率为15%</li>
  <li>更长的训练过程: C4数据集够大，让训练过程可以不用重复数据，因此增加批量大小、增加训练步数会更好</li>
  <li>模型大小: 有好几个版本的T5模型，Base、Small、Large、3B and 11B</li>
  <li>多任务预训练: 使用多任务预训练会为下游任务带来好处
展示一下最终的效果</li>
</ul>

<center><img src="../assets/img/posts/20220919/8.jpg" /></center>

<h2 id="24-reflection">2.4. Reflection</h2>
<p>这一部分总结了模型的创新部分，同时提出了模型的缺点以及展望</p>

<h1 id="3-个人总结">3. 个人总结</h1>
<p>T5模型是google继bert之后推出的一个大型预训练模型，先说说T5模型的特点，T5模型的架构是transformer的encoder-decoder架构，预训练数据集选用google自制的C4数据集，数据集也相当大，作者希望做出一个大统一的预训练模型，所以采用text-to-text任务类型也是它的一大特点，具体来说就是把所有的NLP任务变成输入一段文本，模型输出一段文本的形式，模型的预训练目标也很有特色，采用了类似bert的掩蔽预训练目标。论文做了很多很多很贵的实验，对比了很多方面，最后得到了这个模型，论文里的实验都说明的很详细，同时它也刷了很多榜，比如GLUE等，效果是比之前的预训练模型都好，是google财大气粗的表现。</p>

<p>模型在github上开源，在tensorflow上可以直接实现</p>]]></content><author><name>Quehry</name></author><category term="paper" /><summary type="html"><![CDATA[arrange notes]]></summary></entry></feed>